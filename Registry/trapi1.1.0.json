{
    "openapi": "3.0.1",
    "info": {
        "contact": {
            "email": "mduby@broadinstitute.org"
        },
        "description": "TRAPI 1.1 endpoint for the NCATS Biomedical Translator Genetics Data KP",
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "termsOfService": "https://github.com/broadinstitute/genetics-kp-dev/blob/master/LICENSE",
        "title": "Genetics KP",
        "version": "1.1.0",
        "x-translator": {
            "biolink-version": "2.1.0",
            "component": "KP",
            "externalDocs": {
                "description": "The values for component and team are restricted according to this external JSON schema. See schema and examples at url",
                "url": "https://github.com/NCATSTranslator/translator_extensions/blob/\\ production/x-translator/"
            },
            "team": [
                "Genetics Provider"
            ]
        },
        "x-trapi": {
            "externalDocs": {
                "description": "The values for version are restricted according to the regex in this external JSON schema. See schema and examples at url",
                "url": "https://github.com/NCATSTranslator/translator_extensions/blob/\\ production/x-trapi/"
            },
            "version": "1.1.2",
            "operations": ["lookup"]
        }
    },
    "servers": [
        {
            "url": "http://translator.type2diabeteskb.org/genetics_provider/trapi/v1.1"
        }
    ],
    "externalDocs": {
        "description": "Documentation for the NCATS Biomedical Translator Reasoners web services",
        "url": "https://github.com/NCATSTranslator/ReasonerAPI"
    },
    "tags": [
        {
            "description": "Get supported relationships by source and target",
            "externalDocs": {
                "description": "Documentation for the reasoner predicates function",
                "url": "http://arax.ncats.io/overview.html#predicates"
            },
            "name": "predicates"
        },
        {
            "description": "Get supported relationships",
            "externalDocs": {
                "description": "Documentation for the reasoner predicates function",
                "url": "http://arax.ncats.io/overview.html#predicates"
            },
            "name": "meta_knowledge_graph"
        },
        {
            "description": "Query reasoner using a predefined question type",
            "externalDocs": {
                "description": "Documentation for the reasoner query function",
                "url": "http://arax.ncats.io/overview.html#query"
            },
            "name": "query"
        },
        {
            "description": "Required for SmartAPI validation of x-translator",
            "name": "translator"
        },
        {
            "description": "Required for SmartAPI validation of x-trapi",
            "name": "trapi"
        },
        {
            "description": "Return identifier and type of some entity in the knowledge graph",
            "externalDocs": {
                "description": "Documentation for the reasoner entity function",
                "url": "https://arax.ncats.io/overview.html#entity"
            },
            "name": "entity"
        }
    ],
    "paths": {
        "/meta_knowledge_graph": {
            "get": {
                "operationId": "meta_knowledge_graph",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MetaKnowledgeGraph"
                                }
                            }
                        },
                        "description": "Returns meta knowledge graph representation of this TRAPI web service."
                    }
                },
                "summary": "Meta knowledge graph representation of this TRAPI web service.",
                "tags": [
                    "meta_knowledge_graph"
                ],
                "x-openapi-router-controller": "openapi_server.controllers.meta_knowledge_graph_controller"
            }
        },
        "/predicates": {
            "get": {
                "deprecated": true,
                "operationId": "predicates",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "additionalProperties": {
                                        "additionalProperties": {
                                            "description": "Array of predicates",
                                            "items": {
                                                "type": "string"
                                            },
                                            "type": "array"
                                        },
                                        "description": "Target map",
                                        "type": "object"
                                    },
                                    "description": "Source map",
                                    "example": {
                                        "biolink:ChemicalSubstance": {
                                            "biolink:Gene": [
                                                "biolink:directly_interacts_with",
                                                "biolink:decreases_activity_of"
                                            ]
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        },
                        "description": "Predicates by source and target"
                    }
                },
                "summary": "Get supported relationships by source and target",
                "tags": [
                    "predicates"
                ],
                "x-openapi-router-controller": "openapi_server.controllers.predicates_controller"
            }
        },
        "/query": {
            "post": {
                "operationId": "query",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Query"
                            }
                        }
                    },
                    "description": "Query information to be submitted",
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Response"
                                }
                            }
                        },
                        "description": "OK. There may or may not be results. Note that some of the provided identifiers may not have been recognized."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "description": "Bad request. The request is invalid according to this OpenAPI schema OR a specific identifier is believed to be invalid somehow (not just unrecognized)."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "description": "Internal server error."
                    },
                    "501": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "description": "Not implemented."
                    }
                },
                "summary": "Query reasoner via one of several inputs",
                "tags": [
                    "query"
                ],
                "x-openapi-router-controller": "openapi_server.controllers.query_controller"
            }
        }
    },
    "components": {
        "schemas": {
            "Attribute": {
                "additionalProperties": false,
                "description": "Generic attribute for a node or an edge that expands the key-value pair concept by including fields for additional metadata. These fields can be used to describe the source of the statement made in key-value pair of the attribute object, or describe the attribute's value itself including its semantic type, or a url providing additional information about it.",
                "properties": {
                    "attribute_source": {
                        "description": "The source of the core assertion made by the key-value pair of an attribute object. Use a CURIE or namespace designator for this resource where possible.",
                        "example": "UniProtKB",
                        "nullable": true,
                        "type": "string"
                    },
                    "attribute_type_id": {
                        "description": "A Compact URI, consisting of a prefix and a reference separated by a colon, such as UniProtKB:P00738. Via an external context definition, the CURIE prefix and colon may be replaced by a URI prefix, such as http://identifiers.org/uniprot/, to form a full URI.",
                        "externalDocs": {
                            "url": "https://www.w3.org/TR/2010/NOTE-curie-20101216/"
                        },
                        "type": "string"
                    },
                    "description": {
                        "description": "Human-readable description for the attribute and its value.",
                        "example": "Assertion Authored By Dr. Trans L. Ator",
                        "nullable": true,
                        "type": "string"
                    },
                    "original_attribute_name": {
                        "description": "The term used by the original source of an attribute to describe the meaning or significance of the value it captures. This may be a column name in a source tsv file, or a key in a source json document for the field in the data that held the attribute's value. Capturing this information  where possible lets us preserve what the original source said. Note that the data type is string' but the contents of the field could also be a CURIE of a third party ontology term.",
                        "example": "p-value",
                        "nullable": true,
                        "type": "string"
                    },
                    "value": {
                        "description": "Value of the attribute. May be any data type, including a list.",
                        "example": 0.000153
                    },
                    "value_type_id": {
                        "description": "A Compact URI, consisting of a prefix and a reference separated by a colon, such as UniProtKB:P00738. Via an external context definition, the CURIE prefix and colon may be replaced by a URI prefix, such as http://identifiers.org/uniprot/, to form a full URI.",
                        "externalDocs": {
                            "url": "https://www.w3.org/TR/2010/NOTE-curie-20101216/"
                        },
                        "type": "string"
                    },
                    "value_url": {
                        "description": "Human-consumable URL linking to a web document that provides additional information about an  attribute's value (not the node or the edge fom which it hangs).",
                        "example": "https://pubmed.ncbi.nlm.nih.gov/32529952",
                        "nullable": true,
                        "type": "string"
                    }
                },
                "required": [
                    "attribute_type_id",
                    "value"
                ],
                "type": "object"
            },
            "BiolinkEntity": {
                "description": "Compact URI (CURIE) for a Biolink class, biolink:NamedThing or a child thereof. The CURIE must use the prefix 'biolink:' followed by the PascalCase class name.",
                "example": "biolink:PhenotypicFeature",
                "externalDocs": {
                    "description": "Biolink model entities",
                    "url": "https://biolink.github.io/biolink-model/docs/NamedThing.html"
                },
                "pattern": "^biolink:[A-Z][a-zA-Z]*$",
                "type": "string"
            },
            "BiolinkPredicate": {
                "description": "CURIE for a Biolink 'predicate' slot, taken from the Biolink slot ('is_a') hierarchy rooted in biolink:related_to (snake_case). This predicate defines the Biolink relationship between the subject and object nodes of a biolink:Association defining a knowledge graph edge.",
                "example": "biolink:interacts_with",
                "externalDocs": {
                    "description": "Biolink model predicates",
                    "url": "https://biolink.github.io/biolink-model/docs/related_to.html"
                },
                "pattern": "^biolink:[a-z][a-z_]*$",
                "type": "string"
            },
            "CURIE": {
                "description": "A Compact URI, consisting of a prefix and a reference separated by a colon, such as UniProtKB:P00738. Via an external context definition, the CURIE prefix and colon may be replaced by a URI prefix, such as http://identifiers.org/uniprot/, to form a full URI.",
                "externalDocs": {
                    "url": "https://www.w3.org/TR/2010/NOTE-curie-20101216/"
                },
                "type": "string"
            },
            "Edge": {
                "additionalProperties": false,
                "description": "A specification of the semantic relationship linking two concepts that are expressed as nodes in the knowledge \"thought\" graph resulting from a query upon the underlying knowledge source.",
                "properties": {
                    "attributes": {
                        "description": "A list of additional attributes for this edge",
                        "items": {
                            "$ref": "#/components/schemas/Attribute"
                        },
                        "nullable": true,
                        "type": "array"
                    },
                    "object": {
                        "description": "A Compact URI, consisting of a prefix and a reference separated by a colon, such as UniProtKB:P00738. Via an external context definition, the CURIE prefix and colon may be replaced by a URI prefix, such as http://identifiers.org/uniprot/, to form a full URI.",
                        "externalDocs": {
                            "url": "https://www.w3.org/TR/2010/NOTE-curie-20101216/"
                        },
                        "type": "string"
                    },
                    "predicate": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/BiolinkPredicate"
                            }
                        ],
                        "nullable": true
                    },
                    "relation": {
                        "description": "The relationship type term of this edge, originally specified by, or curated by inference from, the original source of knowledge. This should generally be specified as predicate ontology CURIE.",
                        "example": "RO:0002447",
                        "nullable": true,
                        "type": "string"
                    },
                    "subject": {
                        "description": "A Compact URI, consisting of a prefix and a reference separated by a colon, such as UniProtKB:P00738. Via an external context definition, the CURIE prefix and colon may be replaced by a URI prefix, such as http://identifiers.org/uniprot/, to form a full URI.",
                        "externalDocs": {
                            "url": "https://www.w3.org/TR/2010/NOTE-curie-20101216/"
                        },
                        "type": "string"
                    }
                },
                "required": [
                    "object",
                    "subject"
                ],
                "type": "object"
            },
            "EdgeBinding": {
                "additionalProperties": true,
                "description": "A instance of EdgeBinding is a single KnowledgeGraph Edge mapping, identified by the corresponding 'id' object key identifier of the Edge within the Knowledge Graph. Instances of EdgeBinding may include extra annotation (such annotation is not yet fully standardized).",
                "properties": {
                    "id": {
                        "description": "The key identifier of a specific KnowledgeGraph Edge.",
                        "type": "string"
                    }
                },
                "required": [
                    "id"
                ],
                "type": "object"
            },
            "KnowledgeGraph": {
                "additionalProperties": true,
                "description": "The knowledge graph associated with a set of results. The instances of Node and Edge defining this graph represent instances of biolink:NamedThing (concept nodes) and biolink:Association (relationship edges) representing (Attribute) annotated knowledge returned from the knowledge sources and inference agents wrapped by the given TRAPI implementation.",
                "properties": {
                    "edges": {
                        "additionalProperties": {
                            "$ref": "#/components/schemas/Edge"
                        },
                        "description": "Dictionary of Edge instances used in the KnowledgeGraph, referenced elsewhere in the TRAPI output by the dictionary key.",
                        "type": "object"
                    },
                    "nodes": {
                        "additionalProperties": {
                            "$ref": "#/components/schemas/Node"
                        },
                        "description": "Dictionary of Node instances used in the KnowledgeGraph, referenced elsewhere in the TRAPI output by the dictionary key.",
                        "type": "object"
                    }
                },
                "required": [
                    "edges",
                    "nodes"
                ],
                "type": "object"
            },
            "LogEntry": {
                "additionalProperties": true,
                "description": "The LogEntry object contains information useful for tracing and debugging across Translator components.  Although an individual component (for example, an ARA or KP) may have its own logging and debugging infrastructure, this internal information is not, in general, available to other components. In addition to a timestamp and logging level, LogEntry includes a string intended to be read by a human, along with one of a standardized set of codes describing the condition of the component sending the message.",
                "example": {
                    "code": "code",
                    "level": "",
                    "message": "message",
                    "timestamp": "2020-09-03T18:13:49+00:00"
                },
                "properties": {
                    "code": {
                        "description": "One of a standardized set of short codes e.g. QueryNotTraversable, KPNotAvailable, KPResponseMalformed",
                        "nullable": true,
                        "type": "string"
                    },
                    "level": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/LogLevel"
                            }
                        ],
                        "nullable": true
                    },
                    "message": {
                        "description": "A human-readable log message",
                        "nullable": true,
                        "type": "string"
                    },
                    "timestamp": {
                        "description": "Timestamp in ISO 8601 format",
                        "example": "2020-09-03T18:13:49+00:00",
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "LogLevel": {
                "description": "Logging level",
                "enum": [
                    "ERROR",
                    "WARNING",
                    "INFO",
                    "DEBUG"
                ],
                "type": "string"
            },
            "Message": {
                "additionalProperties": false,
                "description": "The message object holds the main content of a Query or a Response in three properties: query_graph, results, and knowledge_graph. The query_graph property contains the query configuration, the results property contains any answers that are returned by the service, and knowledge_graph property contains lists of edges and nodes in the thought graph corresponding to this message. The content of these properties is context-dependent to the encompassing object and the TRAPI operation requested.",
                "example": {
                    "query_graph": {
                        "edges": {
                            "e00": {
                                "subject": "n00",
                                "object": "n01",
                                "predicates": [
                                    "biolink:gene_associated_with_condition"
                                ]
                            }
                        },
                        "nodes": {
                            "n00": {
                                "ids": [
                                    "ENSEMBL:ENSG00000133401"
                                ],
                                "categories": [
                                    "biolink:Gene"
                                ]
                            },
                            "n01": {
                                "categories": [
                                    "biolink:Disease"
                                ]
                            }
                        }
                    }
                },
                "properties": {
                    "knowledge_graph": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/KnowledgeGraph"
                            }
                        ],
                        "description": "KnowledgeGraph object that contains lists of nodes and edges in the thought graph corresponding to the message",
                        "nullable": true
                    },
                    "query_graph": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/QueryGraph"
                            }
                        ],
                        "description": "QueryGraph object that contains a serialization of a query in the form of a graph",
                        "nullable": true
                    },
                    "results": {
                        "description": "List of all returned Result objects for the query posed",
                        "items": {
                            "$ref": "#/components/schemas/Result"
                        },
                        "nullable": true,
                        "type": "array"
                    }
                },
                "type": "object"
            },
            "MetaEdge": {
                "additionalProperties": false,
                "description": "Edge in a meta knowledge map describing relationship between a subject Biolink class and an object Biolink class.",
                "example": {
                    "object": "biolink:PhenotypicFeature",
                    "predicate": "biolink:interacts_with",
                    "relations": [
                        "inhibits",
                        "activates"
                    ],
                    "subject": "biolink:PhenotypicFeature"
                },
                "properties": {
                    "object": {
                        "description": "Compact URI (CURIE) for a Biolink class, biolink:NamedThing or a child thereof. The CURIE must use the prefix 'biolink:' followed by the PascalCase class name.",
                        "example": "biolink:PhenotypicFeature",
                        "externalDocs": {
                            "description": "Biolink model entities",
                            "url": "https://biolink.github.io/biolink-model/docs/NamedThing.html"
                        },
                        "pattern": "^biolink:[A-Z][a-zA-Z]*$",
                        "type": "string"
                    },
                    "predicate": {
                        "description": "CURIE for a Biolink 'predicate' slot, taken from the Biolink slot ('is_a') hierarchy rooted in biolink:related_to (snake_case). This predicate defines the Biolink relationship between the subject and object nodes of a biolink:Association defining a knowledge graph edge.",
                        "example": "biolink:interacts_with",
                        "externalDocs": {
                            "description": "Biolink model predicates",
                            "url": "https://biolink.github.io/biolink-model/docs/related_to.html"
                        },
                        "pattern": "^biolink:[a-z][a-z_]*$",
                        "type": "string"
                    },
                    "relations": {
                        "description": "Low-level relations from the underlying source.",
                        "example": [
                            "inhibits",
                            "activates"
                        ],
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "subject": {
                        "description": "Compact URI (CURIE) for a Biolink class, biolink:NamedThing or a child thereof. The CURIE must use the prefix 'biolink:' followed by the PascalCase class name.",
                        "example": "biolink:PhenotypicFeature",
                        "externalDocs": {
                            "description": "Biolink model entities",
                            "url": "https://biolink.github.io/biolink-model/docs/NamedThing.html"
                        },
                        "pattern": "^biolink:[A-Z][a-zA-Z]*$",
                        "type": "string"
                    }
                },
                "required": [
                    "object",
                    "predicate",
                    "subject"
                ],
                "type": "object"
            },
            "MetaKnowledgeGraph": {
                "description": "Knowledge-map representation of this TRAPI web service.",
                "example": {
                    "edges": [
                        {
                            "object": "biolink:PhenotypicFeature",
                            "predicate": "biolink:interacts_with",
                            "relations": [
                                "inhibits",
                                "activates"
                            ],
                            "subject": "biolink:PhenotypicFeature"
                        },
                        {
                            "object": "biolink:PhenotypicFeature",
                            "predicate": "biolink:interacts_with",
                            "relations": [
                                "inhibits",
                                "activates"
                            ],
                            "subject": "biolink:PhenotypicFeature"
                        }
                    ],
                    "nodes": {
                        "key": {
                            "id_prefixes": [
                                "CHEMBL.COMPOUND",
                                "INCHIKEY"
                            ]
                        }
                    }
                },
                "properties": {
                    "edges": {
                        "description": "List of edges/predicates provided by this TRAPI web service.",
                        "items": {
                            "$ref": "#/components/schemas/MetaEdge"
                        },
                        "minItems": 1,
                        "type": "array"
                    },
                    "nodes": {
                        "additionalProperties": {
                            "$ref": "#/components/schemas/MetaNode"
                        },
                        "description": "Collection of node categories provided by this TRAPI web service, indexed by Biolink class CURIEs.",
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "MetaNode": {
                "additionalProperties": false,
                "description": "Description of a node category provided by this TRAPI web service.",
                "example": {
                    "id_prefixes": [
                        "CHEMBL.COMPOUND",
                        "INCHIKEY"
                    ]
                },
                "properties": {
                    "id_prefixes": {
                        "description": "List of CURIE prefixes for the node category that this TRAPI web service understands and accepts on the input.",
                        "example": [
                            "CHEMBL.COMPOUND",
                            "INCHIKEY"
                        ],
                        "items": {
                            "type": "string"
                        },
                        "minItems": 1,
                        "type": "array"
                    }
                },
                "required": [
                    "id_prefixes"
                ],
                "type": "object"
            },
            "Node": {
                "additionalProperties": false,
                "description": "A node in the KnowledgeGraph which represents some biomedical concept. Nodes are identified by the keys in the KnowledgeGraph Node mapping.",
                "properties": {
                    "attributes": {
                        "description": "A list of attributes describing the node",
                        "items": {
                            "$ref": "#/components/schemas/Attribute"
                        },
                        "nullable": true,
                        "type": "array"
                    },
                    "categories": {
                        "items": {
                            "$ref": "#/components/schemas/BiolinkEntity"
                        },
                        "nullable": true,
                        "type": "array"
                    },
                    "name": {
                        "description": "Formal name of the entity",
                        "example": "Haptoglobin",
                        "nullable": true,
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "NodeBinding": {
                "additionalProperties": true,
                "properties": {
                    "id": {
                        "description": "A Compact URI, consisting of a prefix and a reference separated by a colon, such as UniProtKB:P00738. Via an external context definition, the CURIE prefix and colon may be replaced by a URI prefix, such as http://identifiers.org/uniprot/, to form a full URI.",
                        "externalDocs": {
                            "url": "https://www.w3.org/TR/2010/NOTE-curie-20101216/"
                        },
                        "type": "string"
                    }
                },
                "required": [
                    "id"
                ],
                "type": "object"
            },
            "Operations": {
                "additionalProperties": true,
                "description": "Container for one or more Message objects or identifiers for one or more Messages along with a processing plan and options for how those messages should be processed and returned",
                "properties": {
                    "actions": {
                        "description": "List of order-dependent operations to execute",
                        "example": [
                            "add_qnode(name=acetaminophen, key=n00)",
                            "add_qnode(category=biolink:Protein, key=n01)",
                            "add_qedge(subject=n01, object=n00, key=e00)",
                            "expand(edge_key=e00)",
                            "resultify()",
                            "filter_results(action=limit_number_of_results, max_results=10)"
                        ],
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "message_uris": {
                        "description": "List of URIs for Message or Response objects to fetch and process",
                        "example": [
                            "https://arax.ncats.io/api/arax/v1.0/response/38"
                        ],
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "messages": {
                        "description": "List of Message objects to process",
                        "items": {
                            "$ref": "#/components/schemas/Message"
                        },
                        "type": "array"
                    },
                    "options": {
                        "additionalProperties": true,
                        "description": "Map of order independent options that apply during processing",
                        "example": {
                            "halt_on_warning": false
                        },
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "QEdge": {
                "additionalProperties": true,
                "description": "An edge in the QueryGraph used as an filter pattern specification in a query. If optional predicate or relation properties are not specified, they are assumed to be wildcard matches to the target knowledge space. If specified, the ontological inheritance hierarchy associated with the terms provided is assumed, such that edge bindings returned may be an exact match to the given QEdge predicate or relation term ('class'), or to a term which is a subclass of the QEdge specified term.",
                "properties": {
                    "constraints": {
                        "description": "A list of contraints applied to a query edge. If there are multiple items, they must all be true (equivalent to AND)",
                        "items": {
                            "$ref": "#/components/schemas/QueryConstraint"
                        },
                        "nullable": true,
                        "type": "array"
                    },
                    "exclude": {
                        "description": "If set to true, then all subgraphs containing this edge are excluded from the final results. (optional)",
                        "type": "boolean"
                    },
                    "object": {
                        "description": "Corresponds to the map key identifier of the object concept node anchoring the query filter pattern for the query relationship edge.",
                        "example": "https://www.uniprot.org/uniprot/P00738",
                        "type": "string"
                    },
                    "option_group_id": {
                        "description": "Optional string acting as a label on a set of nodes and/or edges indicating that they belong to a group that are to be evaluated as a group. ",
                        "type": "string"
                    },
                    "predicates": {
                        "items": {
                            "$ref": "#/components/schemas/BiolinkPredicate"
                        },
                        "minItems": 1,
                        "nullable": true,
                        "type": "array"
                    },
                    "relation": {
                        "description": "Query constraint against the relationship type term of this edge, as originally specified by, or curated by inference from, the original external source of knowledge. Note that this should often be specified as predicate ontology term CURIE, although this may not be strictly enforced.",
                        "example": "RO:0002447",
                        "nullable": true,
                        "type": "string"
                    },
                    "subject": {
                        "description": "Corresponds to the map key identifier of the subject concept node anchoring the query filter pattern for the query relationship edge.",
                        "example": "https://omim.org/entry/603903",
                        "type": "string"
                    }
                },
                "required": [
                    "object",
                    "subject"
                ],
                "type": "object"
            },
            "QNode": {
                "additionalProperties": true,
                "description": "A node in the QueryGraph used to represent an entity in a query. If a CURIE is not specified, any nodes matching the category of the QNode will be returned in the Results.",
                "properties": {
                    "categories": {
                        "items": {
                            "$ref": "#/components/schemas/BiolinkEntity"
                        },
                        "minItems": 1,
                        "nullable": true,
                        "type": "array"
                    },
                    "constraints": {
                        "description": "A list of contraints applied to a query node. If there are multiple items, they must all be true (equivalent to AND)",
                        "items": {
                            "$ref": "#/components/schemas/QueryConstraint"
                        },
                        "nullable": true,
                        "type": "array"
                    },
                    "ids": {
                        "description": "CURIE identifier for this node",
                        "example": [
                            "OMIM:603903"
                        ],
                        "items": {
                            "$ref": "#/components/schemas/CURIE"
                        },
                        "minItems": 1,
                        "nullable": true,
                        "type": "array"
                    },
                    "is_set": {
                        "default": false,
                        "description": "Boolean that if set to true, indicates that this QNode MAY have multiple KnowledgeGraph Nodes bound to it within each Result. The nodes in a set should be considered as a set of independent nodes, rather than a set of dependent nodes, i.e., the answer would still be valid if the nodes in the set were instead returned individually. Multiple QNodes may have is_set=True. If a QNode (n1) with is_set=True is connected to a QNode (n2) with is_set=False, each n1 must be connected to n2. If a QNode (n1) with is_set=True is connected to a QNode (n2) with is_set=True, each n1 must be connected to at least one n2.",
                        "type": "boolean"
                    },
                    "option_group_id": {
                        "description": "Optional string acting as a label on a set of nodes and/or edges indicating that they belong to a group that are to be evaluated as a group. ",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "Query": {
                "additionalProperties": true,
                "description": "The Query class is used to package a user request for information. A Query object consists of a required Message object with optional additional properties. Additional properties are intended to convey implementation-specific or query-independent parameters. For example, an additional property specifying a log level could allow a user to override the default log level in order to receive more fine-grained log information when debugging an issue.",
                "properties": {
                    "message": {
                        "$ref": "#/components/schemas/Message"
                    }
                },
                "required": [
                    "message"
                ],
                "type": "object",
                "x-body-name": "request_body"
            },
            "QueryConstraint": {
                "additionalProperties": false,
                "description": "Generic query constraint for a query node or query edge",
                "properties": {
                    "id": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/CURIE"
                            }
                        ],
                        "description": "CURIE of the concept being constrained. For properties defined by the Biolink model this SHOULD be a biolink CURIE. otherwise, if possible, from the EDAM ontology. If a suitable CURIE does not exist, enter a descriptive phrase here and submit the new type for consideration by the appropriate authority.",
                        "example": "EDAM:data_0844",
                        "nullable": false
                    },
                    "name": {
                        "description": "Human-readable name or label for the constraint concept. If appropriate, it SHOULD be the term name of the CURIE used as the 'id'. This is redundant but required for human readability.",
                        "example": "molecular mass",
                        "nullable": false,
                        "type": "string"
                    },
                    "not": {
                        "default": false,
                        "type": "boolean"
                    },
                    "operator": {
                        "description": "Relationship between the database value and the constraint value for the specified id. The operators ==, >, and < mean is exactly equal to, is greater than, and is less than, respectively. The 'matches' operator indicates that the value is a regular expression to be evaluated. If value is a list type, then at least one evaluation must be true (equivalent to OR). This means that the == operator with a list acts like a SQL 'IN' clause. The 'not' property negates the operator such that not and == means 'not equal to' (or 'not in' for a list), and not > means <=, and not < means >=, and not matches means does not match. The '==' operator SHOULD NOT be used in a manner that describes an \"is a\" subclass relationship for the parent QNode.",
                        "enum": [
                            "==",
                            ">",
                            "<",
                            "matches"
                        ],
                        "type": "string"
                    },
                    "unit_id": {
                        "description": "CURIE of the units of the value or list of values in the 'value' property. The Units of Measurement Ontology (UO) should be used if possible. The unit_id MUST be provided for (lists of) numerical values that correspond to a quantity that has units.",
                        "example": "UO:0000222"
                    },
                    "unit_name": {
                        "description": "Term name that is associated with the CURIE of the units of the value or list of values in the 'value' property. The Units of Measurement Ontology (UO) SHOULD be used if possible. This property SHOULD be provided if a unit_id is provided. This is redundant but recommended for human readability.",
                        "example": "kilodalton"
                    },
                    "value": {
                        "description": "Value of the attribute. May be any data type, including a list. If the value is a list and there are multiple items, at least one comparison must be true (equivalent to OR). If 'value' is of data type 'object', the keys of the object MAY be treated as a list. A 'list' data type paired with the '>' or '<' operators will encode extraneous comparisons, but this is permitted as it is in SQL and other languages.",
                        "example": 57.0
                    }
                },
                "required": [
                    "id",
                    "name",
                    "operator",
                    "value"
                ],
                "type": "object"
            },
            "QueryGraph": {
                "additionalProperties": true,
                "description": "A graph representing a biomedical question. It serves as a template for each result (answer), where each bound knowledge graph node/edge is expected to obey the constraints of the associated query graph element.",
                "properties": {
                    "edges": {
                        "additionalProperties": {
                            "$ref": "#/components/schemas/QEdge"
                        },
                        "description": "The edge specifications. The keys of this map are unique edge identifiers and the corresponding values include the constraints on bound edges, in addition to specifying the subject and object QNodes.",
                        "type": "object"
                    },
                    "nodes": {
                        "additionalProperties": {
                            "$ref": "#/components/schemas/QNode"
                        },
                        "description": "The node specifications. The keys of this map are unique node identifiers and the corresponding values include the constraints on bound nodes.",
                        "type": "object"
                    }
                },
                "required": [
                    "edges",
                    "nodes"
                ],
                "type": "object"
            },
            "Response": {
                "additionalProperties": true,
                "description": "The Response object contains the main payload when a TRAPI query endpoint interprets and responds to the submitted query successfully (i.e., HTTP Status Code 200). The message property contains the knowledge of the response (query graph, knowledge graph, and results). The status, description, and logs properties provide additional details about the response.",
                "example": {
                    "context": "https://rtx.ncats.io/ns/translator.jsonld",
                    "datetime": "2021-01-09T12:34:45Z",
                    "description": "Success. 42 results found.",
                    "id": "https://arax.ncats.io/api/rtx/v1.0/response/123",
                    "logs": [
                        {
                            "code": "code",
                            "level": "",
                            "message": "message",
                            "timestamp": "2020-09-03T18:13:49+00:00"
                        },
                        {
                            "code": "code",
                            "level": "",
                            "message": "message",
                            "timestamp": "2020-09-03T18:13:49+00:00"
                        }
                    ],
                    "message": {
                        "query_graph": {
                            "edges": {
                                "e00": {
                                    "object": "n01",
                                    "predicate": "biolink:physically_interacts_with",
                                    "subject": "n00"
                                }
                            },
                            "nodes": {
                                "n00": {
                                    "category": "biolink:ChemicalSubstance",
                                    "id": "CHEMBL.COMPOUND:CHEMBL112"
                                },
                                "n01": {
                                    "category": "biolink:Protein"
                                }
                            }
                        }
                    },
                    "operations": "",
                    "original_question": "what proteins are affected by sickle cell anemia",
                    "query_options": {
                        "coalesce": true,
                        "threshold": 0.9
                    },
                    "reasoner_id": "ARAX",
                    "restated_question": "Which proteins are affected by sickle cell anemia?",
                    "schema_version": "1.0.0",
                    "status": "Success",
                    "table_column_names": [
                        "chemical_substance.name",
                        "chemical_substance.id"
                    ],
                    "tool_version": "ARAX 0.8.0",
                    "type": "TranslatorAPIResponse",
                    "workflow": [
                        "{}",
                        "{}"
                    ]
                },
                "properties": {
                    "context": {
                        "description": "JSON-LD context URI",
                        "example": "https://rtx.ncats.io/ns/translator.jsonld",
                        "type": "string"
                    },
                    "datetime": {
                        "description": "Datetime string for the time that this response was generated",
                        "example": "2021-01-09T12:34:45Z",
                        "type": "string"
                    },
                    "description": {
                        "description": "A brief human-readable description of the outcome",
                        "example": "Success. 42 results found.",
                        "nullable": true,
                        "type": "string"
                    },
                    "id": {
                        "description": "URI for this response",
                        "example": "https://arax.ncats.io/api/rtx/v1.0/response/123",
                        "type": "string"
                    },
                    "logs": {
                        "description": "Log entries containing errors, warnings, debugging information, etc",
                        "items": {
                            "$ref": "#/components/schemas/LogEntry"
                        },
                        "nullable": true,
                        "type": "array"
                    },
                    "message": {
                        "$ref": "#/components/schemas/Message"
                    },
                    "operations": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/Operations"
                            }
                        ],
                        "description": "Container for one or more Message objects or identifiers for one or more Messages along with the processing plan and options for how those messages were processed and returned"
                    },
                    "original_question": {
                        "description": "The original question text typed in by the user",
                        "example": "what proteins are affected by sickle cell anemia",
                        "type": "string"
                    },
                    "query_options": {
                        "description": "Dict of options that can be sent with the query. Options are tool specific and not stipulated here",
                        "example": {
                            "coalesce": true,
                            "threshold": 0.9
                        },
                        "type": "object"
                    },
                    "reasoner_id": {
                        "description": "Identifier string of the reasoner that provided this response (one of ARAX, Robokop, etc.)",
                        "example": "ARAX",
                        "type": "string"
                    },
                    "restated_question": {
                        "description": "A precise restatement of the question, as understood by the Translator, for which the answer applies. The user should verify that the restated question matches the intent of their original question (it might not).",
                        "example": "Which proteins are affected by sickle cell anemia?",
                        "type": "string"
                    },
                    "schema_version": {
                        "description": "Version label of this TRAPI schema",
                        "example": "1.0.0",
                        "type": "string"
                    },
                    "status": {
                        "description": "One of a standardized set of short codes, e.g. Success, QueryNotTraversable, KPsNotAvailable",
                        "example": "Success",
                        "nullable": true,
                        "type": "string"
                    },
                    "table_column_names": {
                        "description": "List of column names that corresponds to the row_data for each result",
                        "example": [
                            "chemical_substance.name",
                            "chemical_substance.id"
                        ],
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "tool_version": {
                        "description": "Version label of the tool that generated this response",
                        "example": "ARAX 0.8.0",
                        "type": "string"
                    },
                    "type": {
                        "description": "Entity type of this response",
                        "example": "TranslatorAPIResponse",
                        "type": "string"
                    },
                    "workflow": {
                        "description": "A list of operations that were applied",
                        "items": {
                            "type": "object"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "message"
                ],
                "type": "object"
            },
            "Result": {
                "additionalProperties": true,
                "description": "A Result object specifies the nodes and edges in the knowledge graph that satisfy the structure or conditions of a user-submitted query graph. It must contain a NodeBindings object (list of query graph node to knowledge graph node mappings) and an EdgeBindings object (list of query graph edge to knowledge graph edge mappings).",
                "properties": {
                    "confidence": {
                        "description": "Confidence metric for this result, a value between (inclusive)\n 0.0 (no confidence) and 1.0 (highest confidence)",
                        "example": 0.9234,
                        "format": "float",
                        "nullable": true,
                        "type": "number"
                    },
                    "description": {
                        "description": "A free text description of this result answer from the reasoner",
                        "example": "The genetic condition sickle cell anemia may provide protection from cerebral malaria via genetic alterations of proteins HBB (P68871) and HMOX1 (P09601).",
                        "nullable": true,
                        "type": "string"
                    },
                    "edge_bindings": {
                        "additionalProperties": {
                            "items": {
                                "$ref": "#/components/schemas/EdgeBinding"
                            },
                            "type": "array"
                        },
                        "description": "The dictionary of Input Query Graph to Result Knowledge Graph edge bindings where the dictionary keys are the key identifiers of the Query Graph edges and the associated values of those keys are instances of EdgeBinding schema type (see below). This value is an array of EdgeBindings since a given query edge may resolve to multiple knowledge graph edges in the result.",
                        "type": "object"
                    },
                    "essence": {
                        "description": "A single string that is the terse essence of the result (useful for simple answers)",
                        "example": "ibuprofen",
                        "nullable": true,
                        "type": "string"
                    },
                    "essence_category": {
                        "description": "A Translator BioLink bioentity category of the essence",
                        "example": "biolink:ChemicalSubstance",
                        "nullable": true,
                        "type": "string"
                    },
                    "id": {
                        "description": "URI for this result",
                        "example": "result:234",
                        "nullable": true,
                        "type": "string"
                    },
                    "node_bindings": {
                        "additionalProperties": {
                            "items": {
                                "$ref": "#/components/schemas/NodeBinding"
                            },
                            "type": "array"
                        },
                        "description": "The dictionary of Input Query Graph to Result Knowledge Graph node bindings where the dictionary keys are the key identifiers of the Query Graph nodes and the associated values of those keys are instances of NodeBinding schema type (see below). This value is an array of NodeBindings since a given query node may have multiple knowledge graph Node bindings in the result.",
                        "type": "object"
                    },
                    "reasoner_id": {
                        "description": "Identifier string of the reasoner that provided this result (e.g., ARAX, Robokop, etc.)",
                        "example": "ARAX",
                        "nullable": true,
                        "type": "string"
                    },
                    "result_group": {
                        "description": "An integer group number for results for use in cases where several results should be grouped together. Also useful to control sorting ascending.",
                        "example": 1,
                        "nullable": true,
                        "type": "integer"
                    },
                    "result_group_similarity_score": {
                        "description": "A score that denotes the similarity of this result to other members of the result_group",
                        "example": 0.95,
                        "format": "float",
                        "nullable": true,
                        "type": "number"
                    },
                    "row_data": {
                        "description": "An arbitrary list of values that captures the essence of the result that can be turned into a tabular result across all answers (each result is a row) for a user that wants simplified tabular output",
                        "example": [
                            "ibuprofen",
                            "CHEMBL:CHEMBL521"
                        ],
                        "items": {
                            "oneOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "number"
                                }
                            ]
                        },
                        "nullable": true,
                        "type": "array"
                    },
                    "score": {
                        "description": "Any type of score associated with this result",
                        "example": 163.233,
                        "format": "float",
                        "nullable": true,
                        "type": "number"
                    },
                    "score_direction": {
                        "description": "Sorting indicator for the score: one of higher_is_better or lower_is_better",
                        "example": "lower_is_better",
                        "nullable": true,
                        "type": "string"
                    },
                    "score_name": {
                        "description": "Name for the score",
                        "example": "Jaccard distance",
                        "nullable": true,
                        "type": "string"
                    }
                },
                "required": [
                    "edge_bindings",
                    "node_bindings"
                ],
                "type": "object"
            }
        }
    }
}
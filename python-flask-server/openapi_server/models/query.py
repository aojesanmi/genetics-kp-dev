# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.log_level import LogLevel
from openapi_server.models.message import Message
from openapi_server.models.schema2 import Schema2
from openapi_server import util

from openapi_server.models.log_level import LogLevel  # noqa: E501
from openapi_server.models.message import Message  # noqa: E501
from openapi_server.models.schema2 import Schema2  # noqa: E501

class Query(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, message=None, log_level=None, workflow=None):  # noqa: E501
        """Query - a model defined in OpenAPI

        :param message: The message of this Query.  # noqa: E501
        :type message: Message
        :param log_level: The log_level of this Query.  # noqa: E501
        :type log_level: LogLevel
        :param workflow: The workflow of this Query.  # noqa: E501
        :type workflow: List[Schema2]
        """
        self.openapi_types = {
            'message': Message,
            'log_level': LogLevel,
            'workflow': List[Schema2]
        }

        self.attribute_map = {
            'message': 'message',
            'log_level': 'log_level',
            'workflow': 'workflow'
        }

        self._message = message
        self._log_level = log_level
        self._workflow = workflow

    @classmethod
    def from_dict(cls, dikt) -> 'Query':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Query of this Query.  # noqa: E501
        :rtype: Query
        """
        return util.deserialize_model(dikt, cls)

    @property
    def message(self):
        """Gets the message of this Query.


        :return: The message of this Query.
        :rtype: Message
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this Query.


        :param message: The message of this Query.
        :type message: Message
        """
        if message is None:
            raise ValueError("Invalid value for `message`, must not be `None`")  # noqa: E501

        self._message = message

    @property
    def log_level(self):
        """Gets the log_level of this Query.

        The least critical level of logs to return  # noqa: E501

        :return: The log_level of this Query.
        :rtype: LogLevel
        """
        return self._log_level

    @log_level.setter
    def log_level(self, log_level):
        """Sets the log_level of this Query.

        The least critical level of logs to return  # noqa: E501

        :param log_level: The log_level of this Query.
        :type log_level: LogLevel
        """

        self._log_level = log_level

    @property
    def workflow(self):
        """Gets the workflow of this Query.


        :return: The workflow of this Query.
        :rtype: List[Schema2]
        """
        return self._workflow

    @workflow.setter
    def workflow(self, workflow):
        """Sets the workflow of this Query.


        :param workflow: The workflow of this Query.
        :type workflow: List[Schema2]
        """

        self._workflow = workflow

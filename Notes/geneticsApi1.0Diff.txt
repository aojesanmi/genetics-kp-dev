diff --git a/python-flask-server/.gitignore b/python-flask-server/.gitignore
index a655050..43995bd 100644
--- a/python-flask-server/.gitignore
+++ b/python-flask-server/.gitignore
@@ -45,7 +45,9 @@ coverage.xml
 *,cover
 .hypothesis/
 venv/
+.venv/
 .python-version
+.pytest_cache
 
 # Translations
 *.mo
diff --git a/python-flask-server/.openapi-generator/VERSION b/python-flask-server/.openapi-generator/VERSION
index 2c6109e..28cbf7c 100644
--- a/python-flask-server/.openapi-generator/VERSION
+++ b/python-flask-server/.openapi-generator/VERSION
@@ -1 +1 @@
-3.3.4
\ No newline at end of file
+5.0.0
\ No newline at end of file
diff --git a/python-flask-server/.travis.yml b/python-flask-server/.travis.yml
index dd6c445..ad71ee5 100644
--- a/python-flask-server/.travis.yml
+++ b/python-flask-server/.travis.yml
@@ -5,8 +5,9 @@ python:
   - "3.3"
   - "3.4"
   - "3.5"
-  #- "3.5-dev" # 3.5 development branch
-  #- "nightly" # points to the latest development branch e.g. 3.6-dev
+  - "3.6"
+  - "3.7"
+  - "3.8"
 # command to install dependencies
 install: "pip install -r requirements.txt"
 # command to run tests
diff --git a/python-flask-server/git_push.sh b/python-flask-server/git_push.sh
index 20057f6..ced3be2 100644
--- a/python-flask-server/git_push.sh
+++ b/python-flask-server/git_push.sh
@@ -1,11 +1,17 @@
 #!/bin/sh
 # ref: https://help.github.com/articles/adding-an-existing-project-to-github-using-the-command-line/
 #
-# Usage example: /bin/sh ./git_push.sh wing328 openapi-pestore-perl "minor update"
+# Usage example: /bin/sh ./git_push.sh wing328 openapi-pestore-perl "minor update" "gitlab.com"
 
 git_user_id=$1
 git_repo_id=$2
 release_note=$3
+git_host=$4
+
+if [ "$git_host" = "" ]; then
+    git_host="github.com"
+    echo "[INFO] No command line input provided. Set \$git_host to $git_host"
+fi
 
 if [ "$git_user_id" = "" ]; then
     git_user_id="GIT_USER_ID"
@@ -37,9 +43,9 @@ if [ "$git_remote" = "" ]; then # git remote not defined
 
     if [ "$GIT_TOKEN" = "" ]; then
         echo "[INFO] \$GIT_TOKEN (environment variable) is not set. Using the git credential in your environment."
-        git remote add origin https://github.com/${git_user_id}/${git_repo_id}.git
+        git remote add origin https://${git_host}/${git_user_id}/${git_repo_id}.git
     else
-        git remote add origin https://${git_user_id}:${GIT_TOKEN}@github.com/${git_user_id}/${git_repo_id}.git
+        git remote add origin https://${git_user_id}:${GIT_TOKEN}@${git_host}/${git_user_id}/${git_repo_id}.git
     fi
 
 fi
@@ -47,6 +53,6 @@ fi
 git pull origin master
 
 # Pushes (Forces) the changes in the local repository up to the remote repository
-echo "Git pushing to https://github.com/${git_user_id}/${git_repo_id}.git"
+echo "Git pushing to https://${git_host}/${git_user_id}/${git_repo_id}.git"
 git push origin master 2>&1 | grep -v 'To https'
 
diff --git a/python-flask-server/openapi_server/__main__.py b/python-flask-server/openapi_server/__main__.py
index 3da1745..536dd36 100644
--- a/python-flask-server/openapi_server/__main__.py
+++ b/python-flask-server/openapi_server/__main__.py
@@ -4,12 +4,14 @@ import connexion
 
 from openapi_server import encoder
 
-app = connexion.App(__name__, specification_dir='./openapi/')
-app.app.json_encoder = encoder.JSONEncoder
-app.add_api('openapi.yaml', arguments={'title': 'OpenAPI for NCATS Biomedical Translator Reasoners'})
 
 def main():
-    app.run(port=7000)
+    app = connexion.App(__name__, specification_dir='./openapi/')
+    app.app.json_encoder = encoder.JSONEncoder
+    app.add_api('openapi.yaml',
+                arguments={'title': 'OpenAPI for NCATS Biomedical Translator Reasoners'},
+                pythonic_params=True)
+    app.run(port=8080)
 
 
 if __name__ == '__main__':
diff --git a/python-flask-server/openapi_server/controllers/predicates_controller.py b/python-flask-server/openapi_server/controllers/predicates_controller.py
index 28b03ea..7ec25fd 100644
--- a/python-flask-server/openapi_server/controllers/predicates_controller.py
+++ b/python-flask-server/openapi_server/controllers/predicates_controller.py
@@ -12,26 +12,4 @@ def predicates_get():  # noqa: E501
 
     :rtype: Dict[str, Dict[str, List[str]]]
     """
-    predicates = {}
-    predicates['disease'] = {}
-    predicates['disease']['gene'] = []
-    predicates['disease']['gene'].append('associated')
-    predicates['disease']['pathway'] = []
-    predicates['disease']['pathway'].append('associated')
-    predicates['phenotypic_feature'] = {}
-    predicates['phenotypic_feature']['gene'] = []
-    predicates['phenotypic_feature']['gene'].append('associated')
-    predicates['phenotypic_feature']['pathway'] = []
-    predicates['phenotypic_feature']['pathway'].append('associated')
-    predicates['gene'] = {}
-    predicates['gene']['disease'] = []
-    predicates['gene']['disease'].append('associated')
-    predicates['gene']['phenotypic_feature'] = []
-    predicates['gene']['phenotypic_feature'].append('associated')
-    predicates['pathway'] = {}
-    predicates['pathway']['disease'] = []
-    predicates['pathway']['disease'].append('associated')
-    predicates['pathway']['phenotypic_feature'] = []
-    predicates['pathway']['phenotypic_feature'].append('associated')
-
-    return predicates
+    return 'do some magic!'
diff --git a/python-flask-server/openapi_server/controllers/query_controller.py b/python-flask-server/openapi_server/controllers/query_controller.py
index 8289e78..0781025 100644
--- a/python-flask-server/openapi_server/controllers/query_controller.py
+++ b/python-flask-server/openapi_server/controllers/query_controller.py
@@ -1,9 +1,7 @@
 import connexion
 import six
-import pymysql
-# import mysql.connector
 
-from openapi_server.models.message import Message  # noqa: E501
+from openapi_server.models.response import Response  # noqa: E501
 from openapi_server import util
 
 
@@ -13,126 +11,8 @@ def query(request_body):  # noqa: E501
      # noqa: E501
 
     :param request_body: Query information to be submitted
-    :type request_body: dict | bytes
+    :type request_body: Dict[str, ]
 
-    :rtype: Message
+    :rtype: Response
     """
-    # cnx = mysql.connector.connect(database='Translator', user='mvon')
-    cnx = pymysql.connect(host='localhost', port=3306, database='Translator', user='mvon')
-    # cnx = pymysql.connect(host='localhost', port=3306, database='tran_genepro', user='root', password='this aint no password')
-    cursor = cnx.cursor()
-
-    if connexion.request.is_json:
-        body = connexion.request.get_json()
-        print("got {}".format(body))
-        takenNodes = {}
-        takenEdges = {}
-
-        body['results'] = []
-        body['knowledge_graph'] = {}
-        body['knowledge_graph']['nodes'] = []
-        body['knowledge_graph']['edges'] = []
- 
-        for edge in body['message']['query_graph']['edges']:
-            if 'type' not in edge or edge['type'] != 'associated' or 'source_id' not in edge or 'target_id' not in edge:
-                continue
-            
-            sourceNode = 0;
-            for node in body['message']['query_graph']['nodes']:
-                if 'id' in node and node['id'] == edge['source_id']:
-                    sourceNode = node
-                    break
-
-            if sourceNode == 0 or 'type' not in sourceNode or 'curie' not in sourceNode:
-                continue
-
-            targetnode = 0;
-            for node in body['message']['query_graph']['nodes']:
-                if 'id' in node and node['id'] == edge['target_id']:
-                    targetNode = node
-                    break
-
-            if targetNode == 0 or 'type' not in targetNode:
-                continue
-        
-            qeID       = edge['id']
-            sourceID   = sourceNode['curie']
-            qn0ID      = sourceNode['id']
-            qn1ID      = targetNode['id']
-            sourceType = sourceNode['type']
-            targetType = targetNode['type']
-
-            # N = 0
-            info    = []
-            queries = []
-
-            # log
-            print("running query for source type: {} and source_id: {} and target type: {}".format(sourceType, sourceID, targetType))
-
-            # queries
-            if (sourceType == 'disease' or sourceType == 'phenotypic_feature') and targetType == 'gene':
-                # N = 2
-                info = [["MAGMA-pvalue", "smaller_is_better"],\
-                        ["Richards-effector-genes", "higher_is_better"],\
-                        ["ABC-genes", "not_displayed"],\
-                        ["Genetics-quantile", "higher_is_better"]]
-                queries = ["select GENE,ID,PVALUE from MAGMA_GENES where DISEASE='{}' and CATEGORY='{}' and PVALUE<2.5e-6 ORDER by PVALUE  ASC".format(sourceID,sourceType),\
-                           "select gene, id, probability from richards_gene where phenotype='{}' and category='{}' ORDER by probability desc".format(sourceID,sourceType),\
-                           "select gene_ncbi_id, edge_id, null from abc_gene_phenotype where phenotype_efo_id='{}' and category='{}' and gene_ncbi_id is not null order by edge_id".format(sourceID,sourceType),\
-                           "select GENE,ID,SCORE  from SCORE_GENES where DISEASE='{}' and CATEGORY='{}' and SCORE >0.95   ORDER by SCORE  DESC".format(sourceID,sourceType)]
-
-            elif (sourceType == 'disease' or sourceType == 'phenotypic_feature') and targetType == 'pathway':
-                # N = 1
-                info = [["MAGMA-pvalue", "smaller_is_better"]]
-                queries = ["select PATHWAY,ID,PVALUE from MAGMA_PATHWAYS where DISEASE='{}' and CATEGORY='{}' and PVALUE<2.0e-6 ORDER by PVALUE ASC".format(sourceID,sourceType)]
-
-            elif sourceType == 'gene' and (targetType == 'disease' or targetType == 'phenotypic_feature'):
-                # N = 2
-                info = [["MAGMA-pvalue", "smaller_is_better"],\
-                        ["Richards-effector-genes", "higher_is_better"],\
-                        ["ABC-genes", "not_displayed"],\
-                        ["Genetics-quantile", "higher_is_better"]]
-                queries = ["select DISEASE,ID,PVALUE from MAGMA_GENES where GENE='{}' and CATEGORY='{}' and PVALUE<0.05 ORDER by PVALUE ASC".format(sourceID,targetType),\
-                           "select phenotype, id, probability from richards_gene where gene='{}' and category='{}' ORDER by probability desc".format(sourceID,targetType),\
-                           "select phenotype_efo_id, edge_id, null from abc_gene_phenotype where gene_ncbi_id='{}' and category='{}' and phenotype_efo_id is not null order by edge_id".format(sourceID,targetType),\
-                           "select DISEASE,ID,SCORE  from SCORE_GENES where GENE='{}' and CATEGORY='{}' and SCORE >0.80 ORDER by SCORE DESC".format(sourceID,targetType)]
-
-            elif sourceType == 'pathway' and (targetType == 'disease' or targetType == 'phenotypic_feature'):
-                # N = 1
-                info = [["MAGMA-pvalue", "smaller_is_better"]]
-                queries = ["select DISEASE,ID,PVALUE from MAGMA_PATHWAYS where PATHWAY='{}' and CATEGORY='{}' and PVALUE<0.05 ORDER by PVALUE ASC".format(sourceID,targetType)]
-
-            if len(queries) > 0:
-                for i in range(0, len(queries)):
-                    print("running query: {}".format(queries[i]))
-                    cursor.execute(queries[i])
-                    results = cursor.fetchall()
-                    if results:
-                        for record in results:
-                            targetID  = record[0]
-                            edgeID    = record[1]
-                            score     = record[2]
-
-                            if sourceID not in takenNodes:
-                                body['knowledge_graph']['nodes'].append({"id" : sourceID, "type" : sourceType})
-                                takenNodes[sourceID] = 1
-
-                            if targetID not in takenNodes:
-                                body['knowledge_graph']['nodes'].append({"id" : targetID, "type" : targetType})
-                                takenNodes[targetID] = 1
-
-                            if edgeID not in takenEdges: 
-                                if score is not None:
-                                    body['knowledge_graph']['edges'].append({"id" : edgeID, "source_id": sourceID, "target_id" : targetID, "score_name" : info[i][0], "score" : score, "score_direction" : info[i][1], "type" : "associated"})
-                                else:
-                                    body['knowledge_graph']['edges'].append({"id" : edgeID, "source_id": sourceID, "target_id" : targetID, "score_name" : info[i][0], "type" : "associated"})
-                                takenEdges[edgeID] = 1
-
-                            body['results'].append({"edge_bindings": [ {"kg_id": edgeID, "qg_id": qeID} ], "node_bindings": [ { "kg_id": sourceID, "qg_id": qn0ID }, { "kg_id": targetID, 'qg_id': qn1ID } ] })
-
-        body['query_graph'] = body['message']['query_graph']
-        del body['message']
-        return body
-
-    cnx.close() 
-    return({"status": 400, "title": "body content not JSON", "detail": "Required body content is not JSON", "type": "about:blank"}, 400)
+    return 'do some magic!'
diff --git a/python-flask-server/openapi_server/models/__init__.py b/python-flask-server/openapi_server/models/__init__.py
index e8e86ef..09adf80 100644
--- a/python-flask-server/openapi_server/models/__init__.py
+++ b/python-flask-server/openapi_server/models/__init__.py
@@ -3,10 +3,11 @@
 # flake8: noqa
 from __future__ import absolute_import
 # import models into model package
-from openapi_server.models.credentials import Credentials
+from openapi_server.models.attribute import Attribute
 from openapi_server.models.edge import Edge
 from openapi_server.models.edge_binding import EdgeBinding
 from openapi_server.models.knowledge_graph import KnowledgeGraph
+from openapi_server.models.log_entry import LogEntry
 from openapi_server.models.message import Message
 from openapi_server.models.node import Node
 from openapi_server.models.node_binding import NodeBinding
@@ -14,5 +15,5 @@ from openapi_server.models.q_edge import QEdge
 from openapi_server.models.q_node import QNode
 from openapi_server.models.query import Query
 from openapi_server.models.query_graph import QueryGraph
-from openapi_server.models.remote_knowledge_graph import RemoteKnowledgeGraph
+from openapi_server.models.response import Response
 from openapi_server.models.result import Result
diff --git a/python-flask-server/openapi_server/models/edge.py b/python-flask-server/openapi_server/models/edge.py
index 49d5b5e..7cc4c6e 100644
--- a/python-flask-server/openapi_server/models/edge.py
+++ b/python-flask-server/openapi_server/models/edge.py
@@ -6,8 +6,12 @@ from datetime import date, datetime  # noqa: F401
 from typing import List, Dict  # noqa: F401
 
 from openapi_server.models.base_model_ import Model
+from openapi_server.models.attribute import Attribute
+import re
 from openapi_server import util
 
+from openapi_server.models.attribute import Attribute  # noqa: E501
+import re  # noqa: E501
 
 class Edge(Model):
     """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
@@ -15,36 +19,41 @@ class Edge(Model):
     Do not edit the class manually.
     """
 
-    def __init__(self, id=None, type=None, source_id=None, target_id=None):  # noqa: E501
+    def __init__(self, predicate=None, relation=None, subject=None, object=None, attributes=None):  # noqa: E501
         """Edge - a model defined in OpenAPI
 
-        :param id: The id of this Edge.  # noqa: E501
-        :type id: str
-        :param type: The type of this Edge.  # noqa: E501
-        :type type: str
-        :param source_id: The source_id of this Edge.  # noqa: E501
-        :type source_id: str
-        :param target_id: The target_id of this Edge.  # noqa: E501
-        :type target_id: str
+        :param predicate: The predicate of this Edge.  # noqa: E501
+        :type predicate: str
+        :param relation: The relation of this Edge.  # noqa: E501
+        :type relation: str
+        :param subject: The subject of this Edge.  # noqa: E501
+        :type subject: str
+        :param object: The object of this Edge.  # noqa: E501
+        :type object: str
+        :param attributes: The attributes of this Edge.  # noqa: E501
+        :type attributes: List[Attribute]
         """
         self.openapi_types = {
-            'id': str,
-            'type': str,
-            'source_id': str,
-            'target_id': str
+            'predicate': str,
+            'relation': str,
+            'subject': str,
+            'object': str,
+            'attributes': List[Attribute]
         }
 
         self.attribute_map = {
-            'id': 'id',
-            'type': 'type',
-            'source_id': 'source_id',
-            'target_id': 'target_id'
+            'predicate': 'predicate',
+            'relation': 'relation',
+            'subject': 'subject',
+            'object': 'object',
+            'attributes': 'attributes'
         }
 
-        self._id = id
-        self._type = type
-        self._source_id = source_id
-        self._target_id = target_id
+        self._predicate = predicate
+        self._relation = relation
+        self._subject = subject
+        self._object = object
+        self._attributes = attributes
 
     @classmethod
     def from_dict(cls, dikt) -> 'Edge':
@@ -58,99 +67,122 @@ class Edge(Model):
         return util.deserialize_model(dikt, cls)
 
     @property
-    def id(self):
-        """Gets the id of this Edge.
+    def predicate(self):
+        """Gets the predicate of this Edge.
 
-        Local identifier for this edge which is unique within this KnowledgeGraph, and perhaps within the source reasoner's knowledge graph  # noqa: E501
+        CURIE for a Biolink slot, related_to or a child thereof (snake_case)  # noqa: E501
 
-        :return: The id of this Edge.
+        :return: The predicate of this Edge.
         :rtype: str
         """
-        return self._id
+        return self._predicate
 
-    @id.setter
-    def id(self, id):
-        """Sets the id of this Edge.
+    @predicate.setter
+    def predicate(self, predicate):
+        """Sets the predicate of this Edge.
 
-        Local identifier for this edge which is unique within this KnowledgeGraph, and perhaps within the source reasoner's knowledge graph  # noqa: E501
+        CURIE for a Biolink slot, related_to or a child thereof (snake_case)  # noqa: E501
 
-        :param id: The id of this Edge.
-        :type id: str
+        :param predicate: The predicate of this Edge.
+        :type predicate: str
         """
-        if id is None:
-            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501
+        if predicate is not None and not re.search(r'^biolink:[a-z][a-z_]*$', predicate):  # noqa: E501
+            raise ValueError("Invalid value for `predicate`, must be a follow pattern or equal to `/^biolink:[a-z][a-z_]*$/`")  # noqa: E501
 
-        self._id = id
+        self._predicate = predicate
 
     @property
-    def type(self):
-        """Gets the type of this Edge.
+    def relation(self):
+        """Gets the relation of this Edge.
 
-        A relation, i.e. child of related_to (snake_case)  # noqa: E501
+        Lower-level relationship type of this edge  # noqa: E501
 
-        :return: The type of this Edge.
+        :return: The relation of this Edge.
         :rtype: str
         """
-        return self._type
+        return self._relation
 
-    @type.setter
-    def type(self, type):
-        """Sets the type of this Edge.
+    @relation.setter
+    def relation(self, relation):
+        """Sets the relation of this Edge.
 
-        A relation, i.e. child of related_to (snake_case)  # noqa: E501
+        Lower-level relationship type of this edge  # noqa: E501
 
-        :param type: The type of this Edge.
-        :type type: str
+        :param relation: The relation of this Edge.
+        :type relation: str
         """
 
-        self._type = type
+        self._relation = relation
 
     @property
-    def source_id(self):
-        """Gets the source_id of this Edge.
+    def subject(self):
+        """Gets the subject of this Edge.
 
-        Corresponds to the @id of source node of this edge  # noqa: E501
+        A Compact URI  # noqa: E501
 
-        :return: The source_id of this Edge.
+        :return: The subject of this Edge.
         :rtype: str
         """
-        return self._source_id
+        return self._subject
 
-    @source_id.setter
-    def source_id(self, source_id):
-        """Sets the source_id of this Edge.
+    @subject.setter
+    def subject(self, subject):
+        """Sets the subject of this Edge.
 
-        Corresponds to the @id of source node of this edge  # noqa: E501
+        A Compact URI  # noqa: E501
 
-        :param source_id: The source_id of this Edge.
-        :type source_id: str
+        :param subject: The subject of this Edge.
+        :type subject: str
         """
-        if source_id is None:
-            raise ValueError("Invalid value for `source_id`, must not be `None`")  # noqa: E501
+        if subject is None:
+            raise ValueError("Invalid value for `subject`, must not be `None`")  # noqa: E501
 
-        self._source_id = source_id
+        self._subject = subject
 
     @property
-    def target_id(self):
-        """Gets the target_id of this Edge.
+    def object(self):
+        """Gets the object of this Edge.
 
-        Corresponds to the @id of target node of this edge  # noqa: E501
+        A Compact URI  # noqa: E501
 
-        :return: The target_id of this Edge.
+        :return: The object of this Edge.
         :rtype: str
         """
-        return self._target_id
+        return self._object
 
-    @target_id.setter
-    def target_id(self, target_id):
-        """Sets the target_id of this Edge.
+    @object.setter
+    def object(self, object):
+        """Sets the object of this Edge.
 
-        Corresponds to the @id of target node of this edge  # noqa: E501
+        A Compact URI  # noqa: E501
 
-        :param target_id: The target_id of this Edge.
-        :type target_id: str
+        :param object: The object of this Edge.
+        :type object: str
         """
-        if target_id is None:
-            raise ValueError("Invalid value for `target_id`, must not be `None`")  # noqa: E501
+        if object is None:
+            raise ValueError("Invalid value for `object`, must not be `None`")  # noqa: E501
 
-        self._target_id = target_id
+        self._object = object
+
+    @property
+    def attributes(self):
+        """Gets the attributes of this Edge.
+
+        A list of additional attributes for this edge  # noqa: E501
+
+        :return: The attributes of this Edge.
+        :rtype: List[Attribute]
+        """
+        return self._attributes
+
+    @attributes.setter
+    def attributes(self, attributes):
+        """Sets the attributes of this Edge.
+
+        A list of additional attributes for this edge  # noqa: E501
+
+        :param attributes: The attributes of this Edge.
+        :type attributes: List[Attribute]
+        """
+
+        self._attributes = attributes
diff --git a/python-flask-server/openapi_server/models/edge_binding.py b/python-flask-server/openapi_server/models/edge_binding.py
index d44814b..ba1d4bd 100644
--- a/python-flask-server/openapi_server/models/edge_binding.py
+++ b/python-flask-server/openapi_server/models/edge_binding.py
@@ -15,26 +15,21 @@ class EdgeBinding(Model):
     Do not edit the class manually.
     """
 
-    def __init__(self, qg_id=None, kg_id=None):  # noqa: E501
+    def __init__(self, id=None):  # noqa: E501
         """EdgeBinding - a model defined in OpenAPI
 
-        :param qg_id: The qg_id of this EdgeBinding.  # noqa: E501
-        :type qg_id: str
-        :param kg_id: The kg_id of this EdgeBinding.  # noqa: E501
-        :type kg_id: object
+        :param id: The id of this EdgeBinding.  # noqa: E501
+        :type id: str
         """
         self.openapi_types = {
-            'qg_id': str,
-            'kg_id': object
+            'id': str
         }
 
         self.attribute_map = {
-            'qg_id': 'qg_id',
-            'kg_id': 'kg_id'
+            'id': 'id'
         }
 
-        self._qg_id = qg_id
-        self._kg_id = kg_id
+        self._id = id
 
     @classmethod
     def from_dict(cls, dikt) -> 'EdgeBinding':
@@ -48,51 +43,26 @@ class EdgeBinding(Model):
         return util.deserialize_model(dikt, cls)
 
     @property
-    def qg_id(self):
-        """Gets the qg_id of this EdgeBinding.
+    def id(self):
+        """Gets the id of this EdgeBinding.
 
-        Query-graph edge id, i.e. the `edge_id` of a QEdge  # noqa: E501
+        A knowledge-graph edge id, i.e. the `id` of a KEdge  # noqa: E501
 
-        :return: The qg_id of this EdgeBinding.
+        :return: The id of this EdgeBinding.
         :rtype: str
         """
-        return self._qg_id
+        return self._id
 
-    @qg_id.setter
-    def qg_id(self, qg_id):
-        """Sets the qg_id of this EdgeBinding.
+    @id.setter
+    def id(self, id):
+        """Sets the id of this EdgeBinding.
 
-        Query-graph edge id, i.e. the `edge_id` of a QEdge  # noqa: E501
+        A knowledge-graph edge id, i.e. the `id` of a KEdge  # noqa: E501
 
-        :param qg_id: The qg_id of this EdgeBinding.
-        :type qg_id: str
+        :param id: The id of this EdgeBinding.
+        :type id: str
         """
-        if qg_id is None:
-            raise ValueError("Invalid value for `qg_id`, must not be `None`")  # noqa: E501
+        if id is None:
+            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501
 
-        self._qg_id = qg_id
-
-    @property
-    def kg_id(self):
-        """Gets the kg_id of this EdgeBinding.
-
-        One or more knowledge-graph edge ids, i.e. the `id` of a KEdge  # noqa: E501
-
-        :return: The kg_id of this EdgeBinding.
-        :rtype: object
-        """
-        return self._kg_id
-
-    @kg_id.setter
-    def kg_id(self, kg_id):
-        """Sets the kg_id of this EdgeBinding.
-
-        One or more knowledge-graph edge ids, i.e. the `id` of a KEdge  # noqa: E501
-
-        :param kg_id: The kg_id of this EdgeBinding.
-        :type kg_id: object
-        """
-        if kg_id is None:
-            raise ValueError("Invalid value for `kg_id`, must not be `None`")  # noqa: E501
-
-        self._kg_id = kg_id
+        self._id = id
diff --git a/python-flask-server/openapi_server/models/knowledge_graph.py b/python-flask-server/openapi_server/models/knowledge_graph.py
index 4089bbf..1690a53 100644
--- a/python-flask-server/openapi_server/models/knowledge_graph.py
+++ b/python-flask-server/openapi_server/models/knowledge_graph.py
@@ -6,8 +6,12 @@ from datetime import date, datetime  # noqa: F401
 from typing import List, Dict  # noqa: F401
 
 from openapi_server.models.base_model_ import Model
+from openapi_server.models.edge import Edge
+from openapi_server.models.node import Node
 from openapi_server import util
 
+from openapi_server.models.edge import Edge  # noqa: E501
+from openapi_server.models.node import Node  # noqa: E501
 
 class KnowledgeGraph(Model):
     """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
@@ -19,13 +23,13 @@ class KnowledgeGraph(Model):
         """KnowledgeGraph - a model defined in OpenAPI
 
         :param nodes: The nodes of this KnowledgeGraph.  # noqa: E501
-        :type nodes: List[Node]
+        :type nodes: Dict[str, Node]
         :param edges: The edges of this KnowledgeGraph.  # noqa: E501
-        :type edges: List[Edge]
+        :type edges: Dict[str, Edge]
         """
         self.openapi_types = {
-            'nodes': List[Node],
-            'edges': List[Edge]
+            'nodes': Dict[str, Node],
+            'edges': Dict[str, Edge]
         }
 
         self.attribute_map = {
@@ -54,7 +58,7 @@ class KnowledgeGraph(Model):
         List of nodes in the KnowledgeGraph  # noqa: E501
 
         :return: The nodes of this KnowledgeGraph.
-        :rtype: List[Node]
+        :rtype: Dict[str, Node]
         """
         return self._nodes
 
@@ -65,7 +69,7 @@ class KnowledgeGraph(Model):
         List of nodes in the KnowledgeGraph  # noqa: E501
 
         :param nodes: The nodes of this KnowledgeGraph.
-        :type nodes: List[Node]
+        :type nodes: Dict[str, Node]
         """
         if nodes is None:
             raise ValueError("Invalid value for `nodes`, must not be `None`")  # noqa: E501
@@ -79,7 +83,7 @@ class KnowledgeGraph(Model):
         List of edges in the KnowledgeGraph  # noqa: E501
 
         :return: The edges of this KnowledgeGraph.
-        :rtype: List[Edge]
+        :rtype: Dict[str, Edge]
         """
         return self._edges
 
@@ -90,7 +94,7 @@ class KnowledgeGraph(Model):
         List of edges in the KnowledgeGraph  # noqa: E501
 
         :param edges: The edges of this KnowledgeGraph.
-        :type edges: List[Edge]
+        :type edges: Dict[str, Edge]
         """
         if edges is None:
             raise ValueError("Invalid value for `edges`, must not be `None`")  # noqa: E501
diff --git a/python-flask-server/openapi_server/models/message.py b/python-flask-server/openapi_server/models/message.py
index 2caa996..1c0beae 100644
--- a/python-flask-server/openapi_server/models/message.py
+++ b/python-flask-server/openapi_server/models/message.py
@@ -6,8 +6,14 @@ from datetime import date, datetime  # noqa: F401
 from typing import List, Dict  # noqa: F401
 
 from openapi_server.models.base_model_ import Model
+from openapi_server.models.knowledge_graph import KnowledgeGraph
+from openapi_server.models.query_graph import QueryGraph
+from openapi_server.models.result import Result
 from openapi_server import util
 
+from openapi_server.models.knowledge_graph import KnowledgeGraph  # noqa: E501
+from openapi_server.models.query_graph import QueryGraph  # noqa: E501
+from openapi_server.models.result import Result  # noqa: E501
 
 class Message(Model):
     """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
@@ -23,12 +29,12 @@ class Message(Model):
         :param query_graph: The query_graph of this Message.  # noqa: E501
         :type query_graph: QueryGraph
         :param knowledge_graph: The knowledge_graph of this Message.  # noqa: E501
-        :type knowledge_graph: object
+        :type knowledge_graph: KnowledgeGraph
         """
         self.openapi_types = {
             'results': List[Result],
             'query_graph': QueryGraph,
-            'knowledge_graph': object
+            'knowledge_graph': KnowledgeGraph
         }
 
         self.attribute_map = {
@@ -100,10 +106,9 @@ class Message(Model):
     def knowledge_graph(self):
         """Gets the knowledge_graph of this Message.
 
-        KnowledgeGraph object that contains all the nodes and edges referenced in any of the possible answers to the query OR connection information for a remote knowledge graph  # noqa: E501
 
         :return: The knowledge_graph of this Message.
-        :rtype: object
+        :rtype: KnowledgeGraph
         """
         return self._knowledge_graph
 
@@ -111,10 +116,9 @@ class Message(Model):
     def knowledge_graph(self, knowledge_graph):
         """Sets the knowledge_graph of this Message.
 
-        KnowledgeGraph object that contains all the nodes and edges referenced in any of the possible answers to the query OR connection information for a remote knowledge graph  # noqa: E501
 
         :param knowledge_graph: The knowledge_graph of this Message.
-        :type knowledge_graph: object
+        :type knowledge_graph: KnowledgeGraph
         """
 
         self._knowledge_graph = knowledge_graph
diff --git a/python-flask-server/openapi_server/models/node.py b/python-flask-server/openapi_server/models/node.py
index 3d6f875..87fe746 100644
--- a/python-flask-server/openapi_server/models/node.py
+++ b/python-flask-server/openapi_server/models/node.py
@@ -6,8 +6,12 @@ from datetime import date, datetime  # noqa: F401
 from typing import List, Dict  # noqa: F401
 
 from openapi_server.models.base_model_ import Model
+from openapi_server.models.attribute import Attribute
+from openapi_server.models.one_ofstringarray import OneOfstringarray
 from openapi_server import util
 
+from openapi_server.models.attribute import Attribute  # noqa: E501
+from openapi_server.models.one_ofstringarray import OneOfstringarray  # noqa: E501
 
 class Node(Model):
     """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
@@ -15,31 +19,31 @@ class Node(Model):
     Do not edit the class manually.
     """
 
-    def __init__(self, id=None, name=None, type=None):  # noqa: E501
+    def __init__(self, name=None, category=None, attributes=None):  # noqa: E501
         """Node - a model defined in OpenAPI
 
-        :param id: The id of this Node.  # noqa: E501
-        :type id: str
         :param name: The name of this Node.  # noqa: E501
         :type name: str
-        :param type: The type of this Node.  # noqa: E501
-        :type type: object
+        :param category: The category of this Node.  # noqa: E501
+        :type category: OneOfstringarray
+        :param attributes: The attributes of this Node.  # noqa: E501
+        :type attributes: List[Attribute]
         """
         self.openapi_types = {
-            'id': str,
             'name': str,
-            'type': object
+            'category': OneOfstringarray,
+            'attributes': List[Attribute]
         }
 
         self.attribute_map = {
-            'id': 'id',
             'name': 'name',
-            'type': 'type'
+            'category': 'category',
+            'attributes': 'attributes'
         }
 
-        self._id = id
         self._name = name
-        self._type = type
+        self._category = category
+        self._attributes = attributes
 
     @classmethod
     def from_dict(cls, dikt) -> 'Node':
@@ -52,31 +56,6 @@ class Node(Model):
         """
         return util.deserialize_model(dikt, cls)
 
-    @property
-    def id(self):
-        """Gets the id of this Node.
-
-        CURIE identifier for this node  # noqa: E501
-
-        :return: The id of this Node.
-        :rtype: str
-        """
-        return self._id
-
-    @id.setter
-    def id(self, id):
-        """Sets the id of this Node.
-
-        CURIE identifier for this node  # noqa: E501
-
-        :param id: The id of this Node.
-        :type id: str
-        """
-        if id is None:
-            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501
-
-        self._id = id
-
     @property
     def name(self):
         """Gets the name of this Node.
@@ -101,22 +80,45 @@ class Node(Model):
         self._name = name
 
     @property
-    def type(self):
-        """Gets the type of this Node.
+    def category(self):
+        """Gets the category of this Node.
+
+
+        :return: The category of this Node.
+        :rtype: OneOfstringarray
+        """
+        return self._category
+
+    @category.setter
+    def category(self, category):
+        """Sets the category of this Node.
+
+
+        :param category: The category of this Node.
+        :type category: OneOfstringarray
+        """
+
+        self._category = category
+
+    @property
+    def attributes(self):
+        """Gets the attributes of this Node.
 
+        A list of attributes describing the node  # noqa: E501
 
-        :return: The type of this Node.
-        :rtype: object
+        :return: The attributes of this Node.
+        :rtype: List[Attribute]
         """
-        return self._type
+        return self._attributes
 
-    @type.setter
-    def type(self, type):
-        """Sets the type of this Node.
+    @attributes.setter
+    def attributes(self, attributes):
+        """Sets the attributes of this Node.
 
+        A list of attributes describing the node  # noqa: E501
 
-        :param type: The type of this Node.
-        :type type: object
+        :param attributes: The attributes of this Node.
+        :type attributes: List[Attribute]
         """
 
-        self._type = type
+        self._attributes = attributes
diff --git a/python-flask-server/openapi_server/models/node_binding.py b/python-flask-server/openapi_server/models/node_binding.py
index 79660b4..5f7f75e 100644
--- a/python-flask-server/openapi_server/models/node_binding.py
+++ b/python-flask-server/openapi_server/models/node_binding.py
@@ -15,26 +15,21 @@ class NodeBinding(Model):
     Do not edit the class manually.
     """
 
-    def __init__(self, qg_id=None, kg_id=None):  # noqa: E501
+    def __init__(self, id=None):  # noqa: E501
         """NodeBinding - a model defined in OpenAPI
 
-        :param qg_id: The qg_id of this NodeBinding.  # noqa: E501
-        :type qg_id: str
-        :param kg_id: The kg_id of this NodeBinding.  # noqa: E501
-        :type kg_id: object
+        :param id: The id of this NodeBinding.  # noqa: E501
+        :type id: str
         """
         self.openapi_types = {
-            'qg_id': str,
-            'kg_id': object
+            'id': str
         }
 
         self.attribute_map = {
-            'qg_id': 'qg_id',
-            'kg_id': 'kg_id'
+            'id': 'id'
         }
 
-        self._qg_id = qg_id
-        self._kg_id = kg_id
+        self._id = id
 
     @classmethod
     def from_dict(cls, dikt) -> 'NodeBinding':
@@ -48,51 +43,26 @@ class NodeBinding(Model):
         return util.deserialize_model(dikt, cls)
 
     @property
-    def qg_id(self):
-        """Gets the qg_id of this NodeBinding.
+    def id(self):
+        """Gets the id of this NodeBinding.
 
-        Query-graph node id, i.e. the `node_id` of a QNode  # noqa: E501
+        A Compact URI  # noqa: E501
 
-        :return: The qg_id of this NodeBinding.
+        :return: The id of this NodeBinding.
         :rtype: str
         """
-        return self._qg_id
+        return self._id
 
-    @qg_id.setter
-    def qg_id(self, qg_id):
-        """Sets the qg_id of this NodeBinding.
+    @id.setter
+    def id(self, id):
+        """Sets the id of this NodeBinding.
 
-        Query-graph node id, i.e. the `node_id` of a QNode  # noqa: E501
+        A Compact URI  # noqa: E501
 
-        :param qg_id: The qg_id of this NodeBinding.
-        :type qg_id: str
+        :param id: The id of this NodeBinding.
+        :type id: str
         """
-        if qg_id is None:
-            raise ValueError("Invalid value for `qg_id`, must not be `None`")  # noqa: E501
+        if id is None:
+            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501
 
-        self._qg_id = qg_id
-
-    @property
-    def kg_id(self):
-        """Gets the kg_id of this NodeBinding.
-
-        One or more knowledge-graph node ids, i.e. the `id` of a KNode  # noqa: E501
-
-        :return: The kg_id of this NodeBinding.
-        :rtype: object
-        """
-        return self._kg_id
-
-    @kg_id.setter
-    def kg_id(self, kg_id):
-        """Sets the kg_id of this NodeBinding.
-
-        One or more knowledge-graph node ids, i.e. the `id` of a KNode  # noqa: E501
-
-        :param kg_id: The kg_id of this NodeBinding.
-        :type kg_id: object
-        """
-        if kg_id is None:
-            raise ValueError("Invalid value for `kg_id`, must not be `None`")  # noqa: E501
-
-        self._kg_id = kg_id
+        self._id = id
diff --git a/python-flask-server/openapi_server/models/q_edge.py b/python-flask-server/openapi_server/models/q_edge.py
index da3e3cd..bc0db36 100644
--- a/python-flask-server/openapi_server/models/q_edge.py
+++ b/python-flask-server/openapi_server/models/q_edge.py
@@ -6,8 +6,10 @@ from datetime import date, datetime  # noqa: F401
 from typing import List, Dict  # noqa: F401
 
 from openapi_server.models.base_model_ import Model
+from openapi_server.models.one_ofstringarray import OneOfstringarray
 from openapi_server import util
 
+from openapi_server.models.one_ofstringarray import OneOfstringarray  # noqa: E501
 
 class QEdge(Model):
     """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
@@ -15,36 +17,36 @@ class QEdge(Model):
     Do not edit the class manually.
     """
 
-    def __init__(self, id=None, type=None, source_id=None, target_id=None):  # noqa: E501
+    def __init__(self, predicate=None, relation=None, subject=None, object=None):  # noqa: E501
         """QEdge - a model defined in OpenAPI
 
-        :param id: The id of this QEdge.  # noqa: E501
-        :type id: str
-        :param type: The type of this QEdge.  # noqa: E501
-        :type type: object
-        :param source_id: The source_id of this QEdge.  # noqa: E501
-        :type source_id: str
-        :param target_id: The target_id of this QEdge.  # noqa: E501
-        :type target_id: str
+        :param predicate: The predicate of this QEdge.  # noqa: E501
+        :type predicate: OneOfstringarray
+        :param relation: The relation of this QEdge.  # noqa: E501
+        :type relation: str
+        :param subject: The subject of this QEdge.  # noqa: E501
+        :type subject: str
+        :param object: The object of this QEdge.  # noqa: E501
+        :type object: str
         """
         self.openapi_types = {
-            'id': str,
-            'type': object,
-            'source_id': str,
-            'target_id': str
+            'predicate': OneOfstringarray,
+            'relation': str,
+            'subject': str,
+            'object': str
         }
 
         self.attribute_map = {
-            'id': 'id',
-            'type': 'type',
-            'source_id': 'source_id',
-            'target_id': 'target_id'
+            'predicate': 'predicate',
+            'relation': 'relation',
+            'subject': 'subject',
+            'object': 'object'
         }
 
-        self._id = id
-        self._type = type
-        self._source_id = source_id
-        self._target_id = target_id
+        self._predicate = predicate
+        self._relation = relation
+        self._subject = subject
+        self._object = object
 
     @classmethod
     def from_dict(cls, dikt) -> 'QEdge':
@@ -58,97 +60,95 @@ class QEdge(Model):
         return util.deserialize_model(dikt, cls)
 
     @property
-    def id(self):
-        """Gets the id of this QEdge.
+    def predicate(self):
+        """Gets the predicate of this QEdge.
 
-        QueryGraph internal identifier for this QEdge. Recommended form: e00, e01, e02, etc.  # noqa: E501
 
-        :return: The id of this QEdge.
-        :rtype: str
+        :return: The predicate of this QEdge.
+        :rtype: OneOfstringarray
         """
-        return self._id
+        return self._predicate
 
-    @id.setter
-    def id(self, id):
-        """Sets the id of this QEdge.
+    @predicate.setter
+    def predicate(self, predicate):
+        """Sets the predicate of this QEdge.
 
-        QueryGraph internal identifier for this QEdge. Recommended form: e00, e01, e02, etc.  # noqa: E501
 
-        :param id: The id of this QEdge.
-        :type id: str
+        :param predicate: The predicate of this QEdge.
+        :type predicate: OneOfstringarray
         """
-        if id is None:
-            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501
 
-        self._id = id
+        self._predicate = predicate
 
     @property
-    def type(self):
-        """Gets the type of this QEdge.
+    def relation(self):
+        """Gets the relation of this QEdge.
 
+        Lower-level relationship type of this edge  # noqa: E501
 
-        :return: The type of this QEdge.
-        :rtype: object
+        :return: The relation of this QEdge.
+        :rtype: str
         """
-        return self._type
+        return self._relation
 
-    @type.setter
-    def type(self, type):
-        """Sets the type of this QEdge.
+    @relation.setter
+    def relation(self, relation):
+        """Sets the relation of this QEdge.
 
+        Lower-level relationship type of this edge  # noqa: E501
 
-        :param type: The type of this QEdge.
-        :type type: object
+        :param relation: The relation of this QEdge.
+        :type relation: str
         """
 
-        self._type = type
+        self._relation = relation
 
     @property
-    def source_id(self):
-        """Gets the source_id of this QEdge.
+    def subject(self):
+        """Gets the subject of this QEdge.
 
-        Corresponds to the @id of source node of this edge  # noqa: E501
+        Corresponds to the id of subject node of this edge  # noqa: E501
 
-        :return: The source_id of this QEdge.
+        :return: The subject of this QEdge.
         :rtype: str
         """
-        return self._source_id
+        return self._subject
 
-    @source_id.setter
-    def source_id(self, source_id):
-        """Sets the source_id of this QEdge.
+    @subject.setter
+    def subject(self, subject):
+        """Sets the subject of this QEdge.
 
-        Corresponds to the @id of source node of this edge  # noqa: E501
+        Corresponds to the id of subject node of this edge  # noqa: E501
 
-        :param source_id: The source_id of this QEdge.
-        :type source_id: str
+        :param subject: The subject of this QEdge.
+        :type subject: str
         """
-        if source_id is None:
-            raise ValueError("Invalid value for `source_id`, must not be `None`")  # noqa: E501
+        if subject is None:
+            raise ValueError("Invalid value for `subject`, must not be `None`")  # noqa: E501
 
-        self._source_id = source_id
+        self._subject = subject
 
     @property
-    def target_id(self):
-        """Gets the target_id of this QEdge.
+    def object(self):
+        """Gets the object of this QEdge.
 
-        Corresponds to the @id of target node of this edge  # noqa: E501
+        Corresponds to the id of object node of this edge  # noqa: E501
 
-        :return: The target_id of this QEdge.
+        :return: The object of this QEdge.
         :rtype: str
         """
-        return self._target_id
+        return self._object
 
-    @target_id.setter
-    def target_id(self, target_id):
-        """Sets the target_id of this QEdge.
+    @object.setter
+    def object(self, object):
+        """Sets the object of this QEdge.
 
-        Corresponds to the @id of target node of this edge  # noqa: E501
+        Corresponds to the id of object node of this edge  # noqa: E501
 
-        :param target_id: The target_id of this QEdge.
-        :type target_id: str
+        :param object: The object of this QEdge.
+        :type object: str
         """
-        if target_id is None:
-            raise ValueError("Invalid value for `target_id`, must not be `None`")  # noqa: E501
+        if object is None:
+            raise ValueError("Invalid value for `object`, must not be `None`")  # noqa: E501
 
-        self._target_id = target_id
+        self._object = object
diff --git a/python-flask-server/openapi_server/models/q_node.py b/python-flask-server/openapi_server/models/q_node.py
index 7e59fe5..fee2fdf 100644
--- a/python-flask-server/openapi_server/models/q_node.py
+++ b/python-flask-server/openapi_server/models/q_node.py
@@ -6,8 +6,10 @@ from datetime import date, datetime  # noqa: F401
 from typing import List, Dict  # noqa: F401
 
 from openapi_server.models.base_model_ import Model
+from openapi_server.models.one_ofstringarray import OneOfstringarray
 from openapi_server import util
 
+from openapi_server.models.one_ofstringarray import OneOfstringarray  # noqa: E501
 
 class QNode(Model):
     """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
@@ -15,31 +17,31 @@ class QNode(Model):
     Do not edit the class manually.
     """
 
-    def __init__(self, id=None, curie=None, type=None):  # noqa: E501
+    def __init__(self, id=None, category=None, is_set=False):  # noqa: E501
         """QNode - a model defined in OpenAPI
 
         :param id: The id of this QNode.  # noqa: E501
-        :type id: str
-        :param curie: The curie of this QNode.  # noqa: E501
-        :type curie: object
-        :param type: The type of this QNode.  # noqa: E501
-        :type type: object
+        :type id: OneOfstringarray
+        :param category: The category of this QNode.  # noqa: E501
+        :type category: OneOfstringarray
+        :param is_set: The is_set of this QNode.  # noqa: E501
+        :type is_set: bool
         """
         self.openapi_types = {
-            'id': str,
-            'curie': object,
-            'type': object
+            'id': OneOfstringarray,
+            'category': OneOfstringarray,
+            'is_set': bool
         }
 
         self.attribute_map = {
             'id': 'id',
-            'curie': 'curie',
-            'type': 'type'
+            'category': 'category',
+            'is_set': 'is_set'
         }
 
         self._id = id
-        self._curie = curie
-        self._type = type
+        self._category = category
+        self._is_set = is_set
 
     @classmethod
     def from_dict(cls, dikt) -> 'QNode':
@@ -56,10 +58,10 @@ class QNode(Model):
     def id(self):
         """Gets the id of this QNode.
 
-        QueryGraph internal identifier for this QNode. Recommended form: n00, n01, n02, etc.  # noqa: E501
+        CURIE identifier for this node  # noqa: E501
 
         :return: The id of this QNode.
-        :rtype: str
+        :rtype: OneOfstringarray
         """
         return self._id
 
@@ -67,56 +69,54 @@ class QNode(Model):
     def id(self, id):
         """Sets the id of this QNode.
 
-        QueryGraph internal identifier for this QNode. Recommended form: n00, n01, n02, etc.  # noqa: E501
+        CURIE identifier for this node  # noqa: E501
 
         :param id: The id of this QNode.
-        :type id: str
+        :type id: OneOfstringarray
         """
-        if id is None:
-            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501
 
         self._id = id
 
     @property
-    def curie(self):
-        """Gets the curie of this QNode.
+    def category(self):
+        """Gets the category of this QNode.
 
-        CURIE identifier for this node  # noqa: E501
 
-        :return: The curie of this QNode.
-        :rtype: object
+        :return: The category of this QNode.
+        :rtype: OneOfstringarray
         """
-        return self._curie
+        return self._category
 
-    @curie.setter
-    def curie(self, curie):
-        """Sets the curie of this QNode.
+    @category.setter
+    def category(self, category):
+        """Sets the category of this QNode.
 
-        CURIE identifier for this node  # noqa: E501
 
-        :param curie: The curie of this QNode.
-        :type curie: object
+        :param category: The category of this QNode.
+        :type category: OneOfstringarray
         """
 
-        self._curie = curie
+        self._category = category
 
     @property
-    def type(self):
-        """Gets the type of this QNode.
+    def is_set(self):
+        """Gets the is_set of this QNode.
 
+        Boolean that if set to true, indicates that this QNode MAY have multiple KnowledgeGraph Nodes bound to it within each Result. The nodes in a set should be considered as a set of independent nodes, rather than a set of dependent nodes, i.e., the answer would still be valid if the nodes in the set were instead returned individually. Multiple QNodes may have is_set=True. If a QNode (n1) with is_set=True is connected to a QNode (n2) with is_set=False, each n1 must be connected to n2. If a QNode (n1) with is_set=True is connected to a QNode (n2) with is_set=True, each n1 must be connected to at least one n2.  # noqa: E501
 
-        :return: The type of this QNode.
-        :rtype: object
+        :return: The is_set of this QNode.
+        :rtype: bool
         """
-        return self._type
+        return self._is_set
 
-    @type.setter
-    def type(self, type):
-        """Sets the type of this QNode.
+    @is_set.setter
+    def is_set(self, is_set):
+        """Sets the is_set of this QNode.
 
+        Boolean that if set to true, indicates that this QNode MAY have multiple KnowledgeGraph Nodes bound to it within each Result. The nodes in a set should be considered as a set of independent nodes, rather than a set of dependent nodes, i.e., the answer would still be valid if the nodes in the set were instead returned individually. Multiple QNodes may have is_set=True. If a QNode (n1) with is_set=True is connected to a QNode (n2) with is_set=False, each n1 must be connected to n2. If a QNode (n1) with is_set=True is connected to a QNode (n2) with is_set=True, each n1 must be connected to at least one n2.  # noqa: E501
 
-        :param type: The type of this QNode.
-        :type type: object
+        :param is_set: The is_set of this QNode.
+        :type is_set: bool
         """
 
-        self._type = type
+        self._is_set = is_set
diff --git a/python-flask-server/openapi_server/models/query.py b/python-flask-server/openapi_server/models/query.py
index d612752..c2e7f18 100644
--- a/python-flask-server/openapi_server/models/query.py
+++ b/python-flask-server/openapi_server/models/query.py
@@ -6,8 +6,10 @@ from datetime import date, datetime  # noqa: F401
 from typing import List, Dict  # noqa: F401
 
 from openapi_server.models.base_model_ import Model
+from openapi_server.models.message import Message
 from openapi_server import util
 
+from openapi_server.models.message import Message  # noqa: E501
 
 class Query(Model):
     """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
diff --git a/python-flask-server/openapi_server/models/query_graph.py b/python-flask-server/openapi_server/models/query_graph.py
index 5bb4da7..2b2aeee 100644
--- a/python-flask-server/openapi_server/models/query_graph.py
+++ b/python-flask-server/openapi_server/models/query_graph.py
@@ -6,8 +6,12 @@ from datetime import date, datetime  # noqa: F401
 from typing import List, Dict  # noqa: F401
 
 from openapi_server.models.base_model_ import Model
+from openapi_server.models.q_edge import QEdge
+from openapi_server.models.q_node import QNode
 from openapi_server import util
 
+from openapi_server.models.q_edge import QEdge  # noqa: E501
+from openapi_server.models.q_node import QNode  # noqa: E501
 
 class QueryGraph(Model):
     """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
@@ -19,13 +23,13 @@ class QueryGraph(Model):
         """QueryGraph - a model defined in OpenAPI
 
         :param nodes: The nodes of this QueryGraph.  # noqa: E501
-        :type nodes: List[QNode]
+        :type nodes: Dict[str, QNode]
         :param edges: The edges of this QueryGraph.  # noqa: E501
-        :type edges: List[QEdge]
+        :type edges: Dict[str, QEdge]
         """
         self.openapi_types = {
-            'nodes': List[QNode],
-            'edges': List[QEdge]
+            'nodes': Dict[str, QNode],
+            'edges': Dict[str, QEdge]
         }
 
         self.attribute_map = {
@@ -54,7 +58,7 @@ class QueryGraph(Model):
         List of nodes in the QueryGraph  # noqa: E501
 
         :return: The nodes of this QueryGraph.
-        :rtype: List[QNode]
+        :rtype: Dict[str, QNode]
         """
         return self._nodes
 
@@ -65,7 +69,7 @@ class QueryGraph(Model):
         List of nodes in the QueryGraph  # noqa: E501
 
         :param nodes: The nodes of this QueryGraph.
-        :type nodes: List[QNode]
+        :type nodes: Dict[str, QNode]
         """
         if nodes is None:
             raise ValueError("Invalid value for `nodes`, must not be `None`")  # noqa: E501
@@ -79,7 +83,7 @@ class QueryGraph(Model):
         List of edges in the QueryGraph  # noqa: E501
 
         :return: The edges of this QueryGraph.
-        :rtype: List[QEdge]
+        :rtype: Dict[str, QEdge]
         """
         return self._edges
 
@@ -90,7 +94,7 @@ class QueryGraph(Model):
         List of edges in the QueryGraph  # noqa: E501
 
         :param edges: The edges of this QueryGraph.
-        :type edges: List[QEdge]
+        :type edges: Dict[str, QEdge]
         """
         if edges is None:
             raise ValueError("Invalid value for `edges`, must not be `None`")  # noqa: E501
diff --git a/python-flask-server/openapi_server/models/result.py b/python-flask-server/openapi_server/models/result.py
index d65db92..980f225 100644
--- a/python-flask-server/openapi_server/models/result.py
+++ b/python-flask-server/openapi_server/models/result.py
@@ -6,8 +6,12 @@ from datetime import date, datetime  # noqa: F401
 from typing import List, Dict  # noqa: F401
 
 from openapi_server.models.base_model_ import Model
+from openapi_server.models.edge_binding import EdgeBinding
+from openapi_server.models.node_binding import NodeBinding
 from openapi_server import util
 
+from openapi_server.models.edge_binding import EdgeBinding  # noqa: E501
+from openapi_server.models.node_binding import NodeBinding  # noqa: E501
 
 class Result(Model):
     """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
@@ -19,13 +23,13 @@ class Result(Model):
         """Result - a model defined in OpenAPI
 
         :param node_bindings: The node_bindings of this Result.  # noqa: E501
-        :type node_bindings: List[NodeBinding]
+        :type node_bindings: Dict[str, List[NodeBinding]]
         :param edge_bindings: The edge_bindings of this Result.  # noqa: E501
-        :type edge_bindings: List[EdgeBinding]
+        :type edge_bindings: Dict[str, List[EdgeBinding]]
         """
         self.openapi_types = {
-            'node_bindings': List[NodeBinding],
-            'edge_bindings': List[EdgeBinding]
+            'node_bindings': Dict[str, List[NodeBinding]],
+            'edge_bindings': Dict[str, List[EdgeBinding]]
         }
 
         self.attribute_map = {
@@ -54,7 +58,7 @@ class Result(Model):
         List of QNode-KNode bindings.  # noqa: E501
 
         :return: The node_bindings of this Result.
-        :rtype: List[NodeBinding]
+        :rtype: Dict[str, List[NodeBinding]]
         """
         return self._node_bindings
 
@@ -65,7 +69,7 @@ class Result(Model):
         List of QNode-KNode bindings.  # noqa: E501
 
         :param node_bindings: The node_bindings of this Result.
-        :type node_bindings: List[NodeBinding]
+        :type node_bindings: Dict[str, List[NodeBinding]]
         """
         if node_bindings is None:
             raise ValueError("Invalid value for `node_bindings`, must not be `None`")  # noqa: E501
@@ -79,7 +83,7 @@ class Result(Model):
         List of QEdge-KEdge bindings.  # noqa: E501
 
         :return: The edge_bindings of this Result.
-        :rtype: List[EdgeBinding]
+        :rtype: Dict[str, List[EdgeBinding]]
         """
         return self._edge_bindings
 
@@ -90,7 +94,7 @@ class Result(Model):
         List of QEdge-KEdge bindings.  # noqa: E501
 
         :param edge_bindings: The edge_bindings of this Result.
-        :type edge_bindings: List[EdgeBinding]
+        :type edge_bindings: Dict[str, List[EdgeBinding]]
         """
         if edge_bindings is None:
             raise ValueError("Invalid value for `edge_bindings`, must not be `None`")  # noqa: E501
diff --git a/python-flask-server/openapi_server/openapi/openapi.yaml b/python-flask-server/openapi_server/openapi/openapi.yaml
index 22d7424..640f1ed 100644
--- a/python-flask-server/openapi_server/openapi/openapi.yaml
+++ b/python-flask-server/openapi_server/openapi/openapi.yaml
@@ -6,9 +6,9 @@ info:
   license:
     name: Apache 2.0
     url: http://www.apache.org/licenses/LICENSE-2.0.html
-  termsOfService: '{{url}}'
+  termsOfService: INSERT-URL-HERE
   title: OpenAPI for NCATS Biomedical Translator Reasoners
-  version: 0.9.2
+  version: 1.0.0-beta
 externalDocs:
   description: Documentation for the NCATS Biomedical Translator Reasoners web services
   url: https://github.com/NCATS-Tangerine/NCATS-ReasonerStdAPI
@@ -25,12 +25,14 @@ tags:
     description: Documentation for the reasoner query function
     url: http://reasonerhost.ncats.io/overview.html#query
   name: query
+- name: translator
+- name: reasoner
 paths:
   /predicates:
     get:
       operationId: predicates_get
       responses:
-        200:
+        "200":
           content:
             application/json:
               schema:
@@ -44,10 +46,10 @@ paths:
                   type: object
                 description: Source map
                 example:
-                  chemical_substance:
-                    gene:
-                    - directly_interacts_with
-                    - decreases_activity_of
+                  biolink:ChemicalSubstance:
+                    biolink:Gene:
+                    - biolink:directly_interacts_with
+                    - biolink:decreases_activity_of
                 type: object
           description: Predicates by source and target
       summary: Get supported relationships by source and target
@@ -65,14 +67,33 @@ paths:
         description: Query information to be submitted
         required: true
       responses:
-        200:
+        "200":
           content:
             application/json:
               schema:
-                $ref: '#/components/schemas/Message'
-          description: successful operation
-        400:
-          description: Invalid status value
+                $ref: '#/components/schemas/Response'
+          description: OK. There may or may not be results. Note that some of the
+            provided identifiers may not have been recognized.
+        "400":
+          content:
+            application/json:
+              schema:
+                type: string
+          description: Bad request. The request is invalid according to this OpenAPI
+            schema OR a specific identifier is believed to be invalid somehow (not
+            just unrecognized).
+        "500":
+          content:
+            application/json:
+              schema:
+                type: string
+          description: Internal server error.
+        "501":
+          content:
+            application/json:
+              schema:
+                type: string
+          description: Not implemented.
       summary: Query reasoner via one of several inputs
       tags:
       - query
@@ -89,48 +110,164 @@ components:
       - message
       type: object
       x-body-name: request_body
+    Response:
+      example:
+        description: description
+        message:
+          knowledge_graph:
+            nodes:
+              key:
+                name: Haptoglobin
+                attributes:
+                - name: PubMed Identifier
+                  source: UniProtKB
+                  type: EDAM:data_1187
+                  value: 32529952
+                  url: https://pubmed.ncbi.nlm.nih.gov/32529952
+                - name: PubMed Identifier
+                  source: UniProtKB
+                  type: EDAM:data_1187
+                  value: 32529952
+                  url: https://pubmed.ncbi.nlm.nih.gov/32529952
+                category: ""
+            edges:
+              key:
+                predicate: biolink:interacts_with
+                subject: subject
+                attributes:
+                - name: PubMed Identifier
+                  source: UniProtKB
+                  type: EDAM:data_1187
+                  value: 32529952
+                  url: https://pubmed.ncbi.nlm.nih.gov/32529952
+                - name: PubMed Identifier
+                  source: UniProtKB
+                  type: EDAM:data_1187
+                  value: 32529952
+                  url: https://pubmed.ncbi.nlm.nih.gov/32529952
+                relation: upregulates
+                object: object
+          results:
+          - edge_bindings:
+              key:
+              - id: id
+              - id: id
+            node_bindings:
+              key:
+              - id: id
+              - id: id
+          - edge_bindings:
+              key:
+              - id: id
+              - id: id
+            node_bindings:
+              key:
+              - id: id
+              - id: id
+          query_graph:
+            nodes:
+              key:
+                is_set: false
+                id: OMIM:603903
+                category: ""
+            edges:
+              key:
+                predicate: ""
+                subject: https://omim.org/entry/603903
+                relation: upregulates
+                object: https://www.uniprot.org/uniprot/P00738
+        logs:
+        - code: code
+          level: ERROR
+          message: message
+          timestamp: 2020-09-03T18:13:49Z
+        - code: code
+          level: ERROR
+          message: message
+          timestamp: 2020-09-03T18:13:49Z
+        status: status
+      properties:
+        message:
+          $ref: '#/components/schemas/Message'
+        status:
+          description: One of a standardized set of short codes, e.g. Success, QueryNotTraversable,
+            KPsNotAvailable
+          type: string
+        description:
+          description: A brief human-readable description of the outcome
+          type: string
+        logs:
+          items:
+            $ref: '#/components/schemas/LogEntry'
+          type: array
+      required:
+      - message
+      type: object
     Message:
-      additionalProperties: true
+      additionalProperties: false
       example:
-        knowledge_graph: '{}'
+        knowledge_graph:
+          nodes:
+            key:
+              name: Haptoglobin
+              attributes:
+              - name: PubMed Identifier
+                source: UniProtKB
+                type: EDAM:data_1187
+                value: 32529952
+                url: https://pubmed.ncbi.nlm.nih.gov/32529952
+              - name: PubMed Identifier
+                source: UniProtKB
+                type: EDAM:data_1187
+                value: 32529952
+                url: https://pubmed.ncbi.nlm.nih.gov/32529952
+              category: ""
+          edges:
+            key:
+              predicate: biolink:interacts_with
+              subject: subject
+              attributes:
+              - name: PubMed Identifier
+                source: UniProtKB
+                type: EDAM:data_1187
+                value: 32529952
+                url: https://pubmed.ncbi.nlm.nih.gov/32529952
+              - name: PubMed Identifier
+                source: UniProtKB
+                type: EDAM:data_1187
+                value: 32529952
+                url: https://pubmed.ncbi.nlm.nih.gov/32529952
+              relation: upregulates
+              object: object
         results:
         - edge_bindings:
-          - kg_id: ""
-            qg_id: qg_id
-          - kg_id: ""
-            qg_id: qg_id
+            key:
+            - id: id
+            - id: id
           node_bindings:
-          - kg_id: ""
-            qg_id: qg_id
-          - kg_id: ""
-            qg_id: qg_id
+            key:
+            - id: id
+            - id: id
         - edge_bindings:
-          - kg_id: ""
-            qg_id: qg_id
-          - kg_id: ""
-            qg_id: qg_id
+            key:
+            - id: id
+            - id: id
           node_bindings:
-          - kg_id: ""
-            qg_id: qg_id
-          - kg_id: ""
-            qg_id: qg_id
+            key:
+            - id: id
+            - id: id
         query_graph:
           nodes:
-          - curie: OMIM:603903
-            id: n00
-            type: ""
-          - curie: OMIM:603903
-            id: n00
-            type: ""
+            key:
+              is_set: false
+              id: OMIM:603903
+              category: ""
           edges:
-          - target_id: https://www.uniprot.org/uniprot/P00738
-            id: e00
-            source_id: https://omim.org/entry/603903
-            type: ""
-          - target_id: https://www.uniprot.org/uniprot/P00738
-            id: e00
-            source_id: https://omim.org/entry/603903
-            type: ""
+            key:
+              predicate: ""
+              subject: https://omim.org/entry/603903
+              relation: upregulates
+              object: https://www.uniprot.org/uniprot/P00738
       properties:
         results:
           description: List of all returned potential answers for the query posed
@@ -140,159 +277,168 @@ components:
         query_graph:
           $ref: '#/components/schemas/QueryGraph'
         knowledge_graph:
-          description: KnowledgeGraph object that contains all the nodes and edges referenced in any of the possible answers to the query OR connection information for a remote knowledge graph
-          oneOf:
-          - $ref: '#/components/schemas/KnowledgeGraph'
-          - $ref: '#/components/schemas/RemoteKnowledgeGraph'
-          type: object
+          $ref: '#/components/schemas/KnowledgeGraph'
+      type: object
+    LogEntry:
+      example:
+        code: code
+        level: ERROR
+        message: message
+        timestamp: 2020-09-03T18:13:49Z
+      properties:
+        timestamp:
+          description: Timestamp in ISO 8601 format
+          example: 2020-09-03T18:13:49Z
+          format: date-time
+          type: string
+        level:
+          description: Logging level
+          enum:
+          - ERROR
+          - WARNING
+          - INFO
+          - DEBUG
+          type: string
+        code:
+          description: One of a standardized set of short codes e.g. QueryNotTraversable,
+            KPNotAvailable, KPResponseMalformed
+          type: string
+        message:
+          description: A human-readable log message
+          type: string
       type: object
     Result:
       description: One of potentially several results or answers for a query
       example:
         edge_bindings:
-        - kg_id: ""
-          qg_id: qg_id
-        - kg_id: ""
-          qg_id: qg_id
+          key:
+          - id: id
+          - id: id
         node_bindings:
-        - kg_id: ""
-          qg_id: qg_id
-        - kg_id: ""
-          qg_id: qg_id
+          key:
+          - id: id
+          - id: id
       properties:
         node_bindings:
+          additionalProperties:
+            items:
+              $ref: '#/components/schemas/NodeBinding'
+            type: array
           description: List of QNode-KNode bindings.
-          items:
-            $ref: '#/components/schemas/NodeBinding'
-          type: array
+          type: object
         edge_bindings:
+          additionalProperties:
+            items:
+              $ref: '#/components/schemas/EdgeBinding'
+            type: array
           description: List of QEdge-KEdge bindings.
-          items:
-            $ref: '#/components/schemas/EdgeBinding'
-          type: array
+          type: object
       required:
       - edge_bindings
       - node_bindings
       type: object
     NodeBinding:
       example:
-        kg_id: ""
-        qg_id: qg_id
+        id: id
       properties:
-        qg_id:
-          description: Query-graph node id, i.e. the `node_id` of a QNode
+        id:
+          description: A Compact URI
+          externalDocs:
+            url: https://www.w3.org/TR/2010/NOTE-curie-20101216/
           type: string
-        kg_id:
-          description: One or more knowledge-graph node ids, i.e. the `id` of a KNode
-          oneOf:
-          - type: string
-          - items:
-              type: string
-            type: array
       required:
-      - kg_id
-      - qg_id
+      - id
       type: object
     EdgeBinding:
       example:
-        kg_id: ""
-        qg_id: qg_id
+        id: id
       properties:
-        qg_id:
-          description: Query-graph edge id, i.e. the `edge_id` of a QEdge
+        id:
+          description: A knowledge-graph edge id, i.e. the `id` of a KEdge
           type: string
-        kg_id:
-          description: One or more knowledge-graph edge ids, i.e. the `id` of a KEdge
-          oneOf:
-          - type: string
-          - items:
-              type: string
-            type: array
       required:
-      - kg_id
-      - qg_id
+      - id
       type: object
     KnowledgeGraph:
       additionalProperties: true
-      description: A thought graph associated with this result. This will commonly be a linear path subgraph from one concept to another, but related items aside of the path may be included.
+      description: A thought graph associated with this result. This will commonly
+        be a linear path subgraph from one concept to another, but related items aside
+        of the path may be included.
+      example:
+        nodes:
+          key:
+            name: Haptoglobin
+            attributes:
+            - name: PubMed Identifier
+              source: UniProtKB
+              type: EDAM:data_1187
+              value: 32529952
+              url: https://pubmed.ncbi.nlm.nih.gov/32529952
+            - name: PubMed Identifier
+              source: UniProtKB
+              type: EDAM:data_1187
+              value: 32529952
+              url: https://pubmed.ncbi.nlm.nih.gov/32529952
+            category: ""
+        edges:
+          key:
+            predicate: biolink:interacts_with
+            subject: subject
+            attributes:
+            - name: PubMed Identifier
+              source: UniProtKB
+              type: EDAM:data_1187
+              value: 32529952
+              url: https://pubmed.ncbi.nlm.nih.gov/32529952
+            - name: PubMed Identifier
+              source: UniProtKB
+              type: EDAM:data_1187
+              value: 32529952
+              url: https://pubmed.ncbi.nlm.nih.gov/32529952
+            relation: upregulates
+            object: object
       properties:
         nodes:
-          description: List of nodes in the KnowledgeGraph
-          items:
+          additionalProperties:
             $ref: '#/components/schemas/Node'
-          type: array
+          description: List of nodes in the KnowledgeGraph
+          type: object
         edges:
-          description: List of edges in the KnowledgeGraph
-          items:
+          additionalProperties:
             $ref: '#/components/schemas/Edge'
-          type: array
+          description: List of edges in the KnowledgeGraph
+          type: object
       required:
       - edges
       - nodes
       type: object
-    RemoteKnowledgeGraph:
-      description: A thought graph associated with this result that is not repeated here, but stored elsewhere in a way that can be remotely accessed by the reader of this Message
-      properties:
-        url:
-          description: URL that provides programmatic access to the remote knowledge graph
-          example: http://robokop.renci.org/api/kg
-          type: string
-        credentials:
-          description: Credentials needed for programmatic access to the remote knowledge graph
-          items:
-            $ref: '#/components/schemas/Credentials'
-          type: object
-        protocol:
-          default: neo4j
-          type: string
-      required:
-      - url
-      type: object
-    Credentials:
-      additionalProperties: true
-      description: Credentials needed for programmatic access to the remote knowledge graph
-      properties:
-        username:
-          description: Username needed for programmatic access to the remote knowledge graph
-          type: string
-        password:
-          description: Password needed for programmatic access to the remote knowledge graph
-          type: string
-      required:
-      - password
-      - username
-      type: object
     QueryGraph:
       additionalProperties: true
-      description: A graph intended to be the thought path to be followed by a reasoner to answer the question. This graph is a representation of a question.
+      description: A graph intended to be the thought path to be followed by a reasoner
+        to answer the question. This graph is a representation of a question.
       example:
         nodes:
-        - curie: OMIM:603903
-          id: n00
-          type: ""
-        - curie: OMIM:603903
-          id: n00
-          type: ""
+          key:
+            is_set: false
+            id: OMIM:603903
+            category: ""
         edges:
-        - target_id: https://www.uniprot.org/uniprot/P00738
-          id: e00
-          source_id: https://omim.org/entry/603903
-          type: ""
-        - target_id: https://www.uniprot.org/uniprot/P00738
-          id: e00
-          source_id: https://omim.org/entry/603903
-          type: ""
+          key:
+            predicate: ""
+            subject: https://omim.org/entry/603903
+            relation: upregulates
+            object: https://www.uniprot.org/uniprot/P00738
       properties:
         nodes:
-          description: List of nodes in the QueryGraph
-          items:
+          additionalProperties:
             $ref: '#/components/schemas/QNode'
-          type: array
+          description: List of nodes in the QueryGraph
+          type: object
         edges:
-          description: List of edges in the QueryGraph
-          items:
+          additionalProperties:
             $ref: '#/components/schemas/QEdge'
-          type: array
+          description: List of edges in the QueryGraph
+          type: object
       required:
       - edges
       - nodes
@@ -301,125 +447,209 @@ components:
       additionalProperties: true
       description: A node in the QueryGraph
       example:
-        curie: OMIM:603903
-        id: n00
-        type: ""
+        is_set: false
+        id: OMIM:603903
+        category: ""
       properties:
         id:
-          description: 'QueryGraph internal identifier for this QNode. Recommended
-            form: n00, n01, n02, etc.'
-          example: n00
-          type: string
-        curie:
           description: CURIE identifier for this node
           example: OMIM:603903
           oneOf:
-          - type: string
+          - $ref: '#/components/schemas/CURIE'
           - items:
-              type: string
+              $ref: '#/components/schemas/CURIE'
             type: array
-        type:
+        category:
           oneOf:
           - $ref: '#/components/schemas/BiolinkEntity'
           - items:
               $ref: '#/components/schemas/BiolinkEntity'
             type: array
-      required:
-      - id
+        is_set:
+          default: false
+          description: Boolean that if set to true, indicates that this QNode MAY
+            have multiple KnowledgeGraph Nodes bound to it within each Result. The
+            nodes in a set should be considered as a set of independent nodes, rather
+            than a set of dependent nodes, i.e., the answer would still be valid if
+            the nodes in the set were instead returned individually. Multiple QNodes
+            may have is_set=True. If a QNode (n1) with is_set=True is connected to
+            a QNode (n2) with is_set=False, each n1 must be connected to n2. If a
+            QNode (n1) with is_set=True is connected to a QNode (n2) with is_set=True,
+            each n1 must be connected to at least one n2.
+          type: boolean
       type: object
     QEdge:
       additionalProperties: true
       description: An edge in the QueryGraph
       example:
-        target_id: https://www.uniprot.org/uniprot/P00738
-        id: e00
-        source_id: https://omim.org/entry/603903
-        type: ""
+        predicate: ""
+        subject: https://omim.org/entry/603903
+        relation: upregulates
+        object: https://www.uniprot.org/uniprot/P00738
       properties:
-        id:
-          description: 'QueryGraph internal identifier for this QEdge. Recommended
-            form: e00, e01, e02, etc.'
-          example: e00
-          type: string
-        type:
+        predicate:
           oneOf:
           - $ref: '#/components/schemas/BiolinkRelation'
           - items:
               $ref: '#/components/schemas/BiolinkRelation'
             type: array
-        source_id:
-          description: Corresponds to the @id of source node of this edge
+        relation:
+          description: Lower-level relationship type of this edge
+          example: upregulates
+          type: string
+        subject:
+          description: Corresponds to the id of subject node of this edge
           example: https://omim.org/entry/603903
           type: string
-        target_id:
-          description: Corresponds to the @id of target node of this edge
+        object:
+          description: Corresponds to the id of object node of this edge
           example: https://www.uniprot.org/uniprot/P00738
           type: string
       required:
-      - id
-      - source_id
-      - target_id
+      - object
+      - subject
       type: object
     Node:
-      additionalProperties: true
-      description: A node in the thought subgraph
+      additionalProperties: false
+      description: A node in the knowledge graph
+      example:
+        name: Haptoglobin
+        attributes:
+        - name: PubMed Identifier
+          source: UniProtKB
+          type: EDAM:data_1187
+          value: 32529952
+          url: https://pubmed.ncbi.nlm.nih.gov/32529952
+        - name: PubMed Identifier
+          source: UniProtKB
+          type: EDAM:data_1187
+          value: 32529952
+          url: https://pubmed.ncbi.nlm.nih.gov/32529952
+        category: ""
       properties:
-        id:
-          description: CURIE identifier for this node
-          example: OMIM:603903
-          type: string
         name:
           description: Formal name of the entity
           example: Haptoglobin
           type: string
-        type:
+        category:
           oneOf:
-          - type: string
+          - $ref: '#/components/schemas/BiolinkEntity'
           - items:
               $ref: '#/components/schemas/BiolinkEntity'
             type: array
-      required:
-      - id
+        attributes:
+          description: A list of attributes describing the node
+          items:
+            $ref: '#/components/schemas/Attribute'
+          type: array
       type: object
-    Edge:
-      additionalProperties: true
-      description: An edge in the thought subgraph linking two nodes
+    Attribute:
+      additionalProperties: false
+      description: Generic attribute for a node
+      example:
+        name: PubMed Identifier
+        source: UniProtKB
+        type: EDAM:data_1187
+        value: 32529952
+        url: https://pubmed.ncbi.nlm.nih.gov/32529952
       properties:
-        id:
-          description: Local identifier for this edge which is unique within this KnowledgeGraph, and perhaps within the source reasoner's knowledge graph
-          example: "553903"
+        name:
+          description: Human-readable name or label for the attribute. Should be the
+            name of the semantic type term.
+          example: PubMed Identifier
           type: string
+        value:
+          description: Value of the attribute. May be any data type, including a list.
+          example: 32529952
         type:
-          description: A relation, i.e. child of related_to (snake_case)
-          example: affects
+          description: CURIE of the semantic type of the attribute, from the EDAM
+            ontology if possible. If a suitable identifier does not exist, enter a
+            descriptive phrase here and submit the new type for consideration by the
+            appropriate authority.
+          example: EDAM:data_1187
+          type: string
+        url:
+          description: Human-consumable URL to link out and read about the attribute
+            (not the node).
+          example: https://pubmed.ncbi.nlm.nih.gov/32529952
+          type: string
+        source:
+          description: Source of the attribute, as a CURIE prefix.
+          example: UniProtKB
+          type: string
+      required:
+      - type
+      - value
+      type: object
+    Edge:
+      additionalProperties: false
+      description: An edge in the knowledge graph linking two nodes
+      example:
+        predicate: biolink:interacts_with
+        subject: subject
+        attributes:
+        - name: PubMed Identifier
+          source: UniProtKB
+          type: EDAM:data_1187
+          value: 32529952
+          url: https://pubmed.ncbi.nlm.nih.gov/32529952
+        - name: PubMed Identifier
+          source: UniProtKB
+          type: EDAM:data_1187
+          value: 32529952
+          url: https://pubmed.ncbi.nlm.nih.gov/32529952
+        relation: upregulates
+        object: object
+      properties:
+        predicate:
+          description: CURIE for a Biolink slot, related_to or a child thereof (snake_case)
+          example: biolink:interacts_with
           externalDocs:
             description: Biolink model relations
             url: https://biolink.github.io/biolink-model/docs/related_to.html
+          pattern: ^biolink:[a-z][a-z_]*$
           type: string
-        source_id:
-          description: Corresponds to the @id of source node of this edge
-          example: https://omim.org/entry/603903
+        relation:
+          description: Lower-level relationship type of this edge
+          example: upregulates
           type: string
-        target_id:
-          description: Corresponds to the @id of target node of this edge
-          example: https://www.uniprot.org/uniprot/P00738
+        subject:
+          description: A Compact URI
+          externalDocs:
+            url: https://www.w3.org/TR/2010/NOTE-curie-20101216/
+          type: string
+        object:
+          description: A Compact URI
+          externalDocs:
+            url: https://www.w3.org/TR/2010/NOTE-curie-20101216/
           type: string
+        attributes:
+          description: A list of additional attributes for this edge
+          items:
+            $ref: '#/components/schemas/Attribute'
+          type: array
       required:
-      - id
-      - source_id
-      - target_id
+      - object
+      - subject
       type: object
     BiolinkEntity:
-      description: A subclass of category named_thing (snake_case)
-      example: disease
+      description: CURIE for a Biolink class, NamedThing or a child thereof (PascalCase)
+      example: biolink:PhenotypicFeature
       externalDocs:
         description: Biolink model entities
         url: https://biolink.github.io/biolink-model/docs/NamedThing.html
+      pattern: ^biolink:[A-Z][a-zA-Z]*$
       type: string
     BiolinkRelation:
-      description: A relation, i.e. child of related_to (snake_case)
-      example: affects
+      description: CURIE for a Biolink slot, related_to or a child thereof (snake_case)
+      example: biolink:interacts_with
       externalDocs:
         description: Biolink model relations
         url: https://biolink.github.io/biolink-model/docs/related_to.html
+      pattern: ^biolink:[a-z][a-z_]*$
+      type: string
+    CURIE:
+      description: A Compact URI
+      externalDocs:
+        url: https://www.w3.org/TR/2010/NOTE-curie-20101216/
       type: string
diff --git a/python-flask-server/openapi_server/test/__init__.py b/python-flask-server/openapi_server/test/__init__.py
index cf6b70f..364aba9 100644
--- a/python-flask-server/openapi_server/test/__init__.py
+++ b/python-flask-server/openapi_server/test/__init__.py
@@ -12,5 +12,5 @@ class BaseTestCase(TestCase):
         logging.getLogger('connexion.operation').setLevel('ERROR')
         app = connexion.App(__name__, specification_dir='../openapi/')
         app.app.json_encoder = JSONEncoder
-        app.add_api('openapi.yaml')
+        app.add_api('openapi.yaml', pythonic_params=True)
         return app.app
diff --git a/python-flask-server/openapi_server/util.py b/python-flask-server/openapi_server/util.py
index c7340cd..e1185a7 100644
--- a/python-flask-server/openapi_server/util.py
+++ b/python-flask-server/openapi_server/util.py
@@ -2,6 +2,7 @@ import datetime
 
 import six
 import typing
+from openapi_server import typing_utils
 
 
 def _deserialize(data, klass):
@@ -15,7 +16,7 @@ def _deserialize(data, klass):
     if data is None:
         return None
 
-    if klass in six.integer_types or klass in (float, str, bool):
+    if klass in six.integer_types or klass in (float, str, bool, bytearray):
         return _deserialize_primitive(data, klass)
     elif klass == object:
         return _deserialize_object(data)
@@ -23,10 +24,10 @@ def _deserialize(data, klass):
         return deserialize_date(data)
     elif klass == datetime.datetime:
         return deserialize_datetime(data)
-    elif type(klass) == typing.GenericMeta:
-        if klass.__extra__ == list:
+    elif typing_utils.is_generic(klass):
+        if typing_utils.is_list(klass):
             return _deserialize_list(data, klass.__args__[0])
-        if klass.__extra__ == dict:
+        if typing_utils.is_dict(klass):
             return _deserialize_dict(data, klass.__args__[1])
     else:
         return deserialize_model(data, klass)
diff --git a/python-flask-server/setup.py b/python-flask-server/setup.py
index e8f06c0..4a0a2fe 100644
--- a/python-flask-server/setup.py
+++ b/python-flask-server/setup.py
@@ -3,7 +3,7 @@
 import sys
 from setuptools import setup, find_packages
 
-NAME = "GenomicDataProvider"
+NAME = "openapi_server"
 VERSION = "1.0.0"
 
 # To install the library, run the following
@@ -14,9 +14,9 @@ VERSION = "1.0.0"
 # http://pypi.python.org/pypi/setuptools
 
 REQUIRES = [
-    "connexion==2.0.0",
-    "swagger-ui-bundle==0.0.2",
-    "python_dateutil==2.6.0"
+    "connexion>=2.0.2",
+    "swagger-ui-bundle>=0.0.2",
+    "python_dateutil>=2.6.0"
 ]
 
 setup(
